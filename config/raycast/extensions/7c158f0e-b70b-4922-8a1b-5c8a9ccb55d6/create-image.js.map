{
  "version": 3,
  "sources": ["../node_modules/isexe/windows.js", "../node_modules/isexe/mode.js", "../node_modules/isexe/index.js", "../node_modules/which/which.js", "../node_modules/path-key/index.js", "../node_modules/cross-spawn/lib/util/resolveCommand.js", "../node_modules/cross-spawn/lib/util/escape.js", "../node_modules/shebang-regex/index.js", "../node_modules/shebang-command/index.js", "../node_modules/cross-spawn/lib/util/readShebang.js", "../node_modules/cross-spawn/lib/parse.js", "../node_modules/cross-spawn/lib/enoent.js", "../node_modules/cross-spawn/index.js", "../node_modules/strip-final-newline/index.js", "../node_modules/npm-run-path/index.js", "../node_modules/mimic-fn/index.js", "../node_modules/onetime/index.js", "../node_modules/human-signals/src/core.js", "../node_modules/human-signals/src/realtime.js", "../node_modules/human-signals/src/signals.js", "../node_modules/human-signals/src/main.js", "../node_modules/execa/lib/error.js", "../node_modules/execa/lib/stdio.js", "../node_modules/signal-exit/signals.js", "../node_modules/signal-exit/index.js", "../node_modules/execa/lib/kill.js", "../node_modules/is-stream/index.js", "../node_modules/get-stream/buffer-stream.js", "../node_modules/get-stream/index.js", "../node_modules/merge-stream/index.js", "../node_modules/execa/lib/stream.js", "../node_modules/execa/lib/promise.js", "../node_modules/execa/lib/command.js", "../node_modules/execa/index.js", "../src/create-image.tsx", "../node_modules/run-applescript/index.js", "../src/utilities/generators.ts", "../src/components/SizeSelectionActionPanel.tsx", "../src/utilities/utils.ts", "../src/utilities/clipboard.ts", "../src/components/ImagePatternGrid.tsx", "../src/components/ImageGeneratorActionPanel.tsx"],
  "sourcesContent": ["module.exports = isexe\nisexe.sync = sync\n\nvar fs = require('fs')\n\nfunction checkPathExt (path, options) {\n  var pathext = options.pathExt !== undefined ?\n    options.pathExt : process.env.PATHEXT\n\n  if (!pathext) {\n    return true\n  }\n\n  pathext = pathext.split(';')\n  if (pathext.indexOf('') !== -1) {\n    return true\n  }\n  for (var i = 0; i < pathext.length; i++) {\n    var p = pathext[i].toLowerCase()\n    if (p && path.substr(-p.length).toLowerCase() === p) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction checkStat (stat, path, options) {\n  if (!stat.isSymbolicLink() && !stat.isFile()) {\n    return false\n  }\n  return checkPathExt(path, options)\n}\n\nfunction isexe (path, options, cb) {\n  fs.stat(path, function (er, stat) {\n    cb(er, er ? false : checkStat(stat, path, options))\n  })\n}\n\nfunction sync (path, options) {\n  return checkStat(fs.statSync(path), path, options)\n}\n", "module.exports = isexe\nisexe.sync = sync\n\nvar fs = require('fs')\n\nfunction isexe (path, options, cb) {\n  fs.stat(path, function (er, stat) {\n    cb(er, er ? false : checkStat(stat, options))\n  })\n}\n\nfunction sync (path, options) {\n  return checkStat(fs.statSync(path), options)\n}\n\nfunction checkStat (stat, options) {\n  return stat.isFile() && checkMode(stat, options)\n}\n\nfunction checkMode (stat, options) {\n  var mod = stat.mode\n  var uid = stat.uid\n  var gid = stat.gid\n\n  var myUid = options.uid !== undefined ?\n    options.uid : process.getuid && process.getuid()\n  var myGid = options.gid !== undefined ?\n    options.gid : process.getgid && process.getgid()\n\n  var u = parseInt('100', 8)\n  var g = parseInt('010', 8)\n  var o = parseInt('001', 8)\n  var ug = u | g\n\n  var ret = (mod & o) ||\n    (mod & g) && gid === myGid ||\n    (mod & u) && uid === myUid ||\n    (mod & ug) && myUid === 0\n\n  return ret\n}\n", "var fs = require('fs')\nvar core\nif (process.platform === 'win32' || global.TESTING_WINDOWS) {\n  core = require('./windows.js')\n} else {\n  core = require('./mode.js')\n}\n\nmodule.exports = isexe\nisexe.sync = sync\n\nfunction isexe (path, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = {}\n  }\n\n  if (!cb) {\n    if (typeof Promise !== 'function') {\n      throw new TypeError('callback not provided')\n    }\n\n    return new Promise(function (resolve, reject) {\n      isexe(path, options || {}, function (er, is) {\n        if (er) {\n          reject(er)\n        } else {\n          resolve(is)\n        }\n      })\n    })\n  }\n\n  core(path, options || {}, function (er, is) {\n    // ignore EACCES because that just means we aren't allowed to run it\n    if (er) {\n      if (er.code === 'EACCES' || options && options.ignoreErrors) {\n        er = null\n        is = false\n      }\n    }\n    cb(er, is)\n  })\n}\n\nfunction sync (path, options) {\n  // my kingdom for a filtered catch\n  try {\n    return core.sync(path, options || {})\n  } catch (er) {\n    if (options && options.ignoreErrors || er.code === 'EACCES') {\n      return false\n    } else {\n      throw er\n    }\n  }\n}\n", "const isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys'\n\nconst path = require('path')\nconst COLON = isWindows ? ';' : ':'\nconst isexe = require('isexe')\n\nconst getNotFoundError = (cmd) =>\n  Object.assign(new Error(`not found: ${cmd}`), { code: 'ENOENT' })\n\nconst getPathInfo = (cmd, opt) => {\n  const colon = opt.colon || COLON\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  const pathEnv = cmd.match(/\\//) || isWindows && cmd.match(/\\\\/) ? ['']\n    : (\n      [\n        // windows always checks the cwd first\n        ...(isWindows ? [process.cwd()] : []),\n        ...(opt.path || process.env.PATH ||\n          /* istanbul ignore next: very unusual */ '').split(colon),\n      ]\n    )\n  const pathExtExe = isWindows\n    ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM'\n    : ''\n  const pathExt = isWindows ? pathExtExe.split(colon) : ['']\n\n  if (isWindows) {\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')\n      pathExt.unshift('')\n  }\n\n  return {\n    pathEnv,\n    pathExt,\n    pathExtExe,\n  }\n}\n\nconst which = (cmd, opt, cb) => {\n  if (typeof opt === 'function') {\n    cb = opt\n    opt = {}\n  }\n  if (!opt)\n    opt = {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  const step = i => new Promise((resolve, reject) => {\n    if (i === pathEnv.length)\n      return opt.all && found.length ? resolve(found)\n        : reject(getNotFoundError(cmd))\n\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    resolve(subStep(p, i, 0))\n  })\n\n  const subStep = (p, i, ii) => new Promise((resolve, reject) => {\n    if (ii === pathExt.length)\n      return resolve(step(i + 1))\n    const ext = pathExt[ii]\n    isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {\n      if (!er && is) {\n        if (opt.all)\n          found.push(p + ext)\n        else\n          return resolve(p + ext)\n      }\n      return resolve(subStep(p, i, ii + 1))\n    })\n  })\n\n  return cb ? step(0).then(res => cb(null, res), cb) : step(0)\n}\n\nconst whichSync = (cmd, opt) => {\n  opt = opt || {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  for (let i = 0; i < pathEnv.length; i ++) {\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    for (let j = 0; j < pathExt.length; j ++) {\n      const cur = p + pathExt[j]\n      try {\n        const is = isexe.sync(cur, { pathExt: pathExtExe })\n        if (is) {\n          if (opt.all)\n            found.push(cur)\n          else\n            return cur\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length)\n    return found\n\n  if (opt.nothrow)\n    return null\n\n  throw getNotFoundError(cmd)\n}\n\nmodule.exports = which\nwhich.sync = whichSync\n", "'use strict';\n\nconst pathKey = (options = {}) => {\n\tconst environment = options.env || process.env;\n\tconst platform = options.platform || process.platform;\n\n\tif (platform !== 'win32') {\n\t\treturn 'PATH';\n\t}\n\n\treturn Object.keys(environment).reverse().find(key => key.toUpperCase() === 'PATH') || 'Path';\n};\n\nmodule.exports = pathKey;\n// TODO: Remove this for the next major release\nmodule.exports.default = pathKey;\n", "'use strict';\n\nconst path = require('path');\nconst which = require('which');\nconst getPathKey = require('path-key');\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n    const env = parsed.options.env || process.env;\n    const cwd = process.cwd();\n    const hasCustomCwd = parsed.options.cwd != null;\n    // Worker threads do not have process.chdir()\n    const shouldSwitchCwd = hasCustomCwd && process.chdir !== undefined && !process.chdir.disabled;\n\n    // If a custom `cwd` was specified, we need to change the process cwd\n    // because `which` will do stat calls but does not support a custom cwd\n    if (shouldSwitchCwd) {\n        try {\n            process.chdir(parsed.options.cwd);\n        } catch (err) {\n            /* Empty */\n        }\n    }\n\n    let resolved;\n\n    try {\n        resolved = which.sync(parsed.command, {\n            path: env[getPathKey({ env })],\n            pathExt: withoutPathExt ? path.delimiter : undefined,\n        });\n    } catch (e) {\n        /* Empty */\n    } finally {\n        if (shouldSwitchCwd) {\n            process.chdir(cwd);\n        }\n    }\n\n    // If we successfully resolved, ensure that an absolute path is returned\n    // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it\n    if (resolved) {\n        resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);\n    }\n\n    return resolved;\n}\n\nfunction resolveCommand(parsed) {\n    return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);\n}\n\nmodule.exports = resolveCommand;\n", "'use strict';\n\n// See http://www.robvanderwoude.com/escapechars.php\nconst metaCharsRegExp = /([()\\][%!^\"`<>&|;, *?])/g;\n\nfunction escapeCommand(arg) {\n    // Escape meta chars\n    arg = arg.replace(metaCharsRegExp, '^$1');\n\n    return arg;\n}\n\nfunction escapeArgument(arg, doubleEscapeMetaChars) {\n    // Convert to string\n    arg = `${arg}`;\n\n    // Algorithm below is based on https://qntm.org/cmd\n\n    // Sequence of backslashes followed by a double quote:\n    // double up all the backslashes and escape the double quote\n    arg = arg.replace(/(\\\\*)\"/g, '$1$1\\\\\"');\n\n    // Sequence of backslashes followed by the end of the string\n    // (which will become a double quote later):\n    // double up all the backslashes\n    arg = arg.replace(/(\\\\*)$/, '$1$1');\n\n    // All other backslashes occur literally\n\n    // Quote the whole thing:\n    arg = `\"${arg}\"`;\n\n    // Escape meta chars\n    arg = arg.replace(metaCharsRegExp, '^$1');\n\n    // Double escape meta chars if necessary\n    if (doubleEscapeMetaChars) {\n        arg = arg.replace(metaCharsRegExp, '^$1');\n    }\n\n    return arg;\n}\n\nmodule.exports.command = escapeCommand;\nmodule.exports.argument = escapeArgument;\n", "'use strict';\nmodule.exports = /^#!(.*)/;\n", "'use strict';\nconst shebangRegex = require('shebang-regex');\n\nmodule.exports = (string = '') => {\n\tconst match = string.match(shebangRegex);\n\n\tif (!match) {\n\t\treturn null;\n\t}\n\n\tconst [path, argument] = match[0].replace(/#! ?/, '').split(' ');\n\tconst binary = path.split('/').pop();\n\n\tif (binary === 'env') {\n\t\treturn argument;\n\t}\n\n\treturn argument ? `${binary} ${argument}` : binary;\n};\n", "'use strict';\n\nconst fs = require('fs');\nconst shebangCommand = require('shebang-command');\n\nfunction readShebang(command) {\n    // Read the first 150 bytes from the file\n    const size = 150;\n    const buffer = Buffer.alloc(size);\n\n    let fd;\n\n    try {\n        fd = fs.openSync(command, 'r');\n        fs.readSync(fd, buffer, 0, size, 0);\n        fs.closeSync(fd);\n    } catch (e) { /* Empty */ }\n\n    // Attempt to extract shebang (null is returned if not a shebang)\n    return shebangCommand(buffer.toString());\n}\n\nmodule.exports = readShebang;\n", "'use strict';\n\nconst path = require('path');\nconst resolveCommand = require('./util/resolveCommand');\nconst escape = require('./util/escape');\nconst readShebang = require('./util/readShebang');\n\nconst isWin = process.platform === 'win32';\nconst isExecutableRegExp = /\\.(?:com|exe)$/i;\nconst isCmdShimRegExp = /node_modules[\\\\/].bin[\\\\/][^\\\\/]+\\.cmd$/i;\n\nfunction detectShebang(parsed) {\n    parsed.file = resolveCommand(parsed);\n\n    const shebang = parsed.file && readShebang(parsed.file);\n\n    if (shebang) {\n        parsed.args.unshift(parsed.file);\n        parsed.command = shebang;\n\n        return resolveCommand(parsed);\n    }\n\n    return parsed.file;\n}\n\nfunction parseNonShell(parsed) {\n    if (!isWin) {\n        return parsed;\n    }\n\n    // Detect & add support for shebangs\n    const commandFile = detectShebang(parsed);\n\n    // We don't need a shell if the command filename is an executable\n    const needsShell = !isExecutableRegExp.test(commandFile);\n\n    // If a shell is required, use cmd.exe and take care of escaping everything correctly\n    // Note that `forceShell` is an hidden option used only in tests\n    if (parsed.options.forceShell || needsShell) {\n        // Need to double escape meta chars if the command is a cmd-shim located in `node_modules/.bin/`\n        // The cmd-shim simply calls execute the package bin file with NodeJS, proxying any argument\n        // Because the escape of metachars with ^ gets interpreted when the cmd.exe is first called,\n        // we need to double escape them\n        const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);\n\n        // Normalize posix paths into OS compatible paths (e.g.: foo/bar -> foo\\bar)\n        // This is necessary otherwise it will always fail with ENOENT in those cases\n        parsed.command = path.normalize(parsed.command);\n\n        // Escape command & arguments\n        parsed.command = escape.command(parsed.command);\n        parsed.args = parsed.args.map((arg) => escape.argument(arg, needsDoubleEscapeMetaChars));\n\n        const shellCommand = [parsed.command].concat(parsed.args).join(' ');\n\n        parsed.args = ['/d', '/s', '/c', `\"${shellCommand}\"`];\n        parsed.command = process.env.comspec || 'cmd.exe';\n        parsed.options.windowsVerbatimArguments = true; // Tell node's spawn that the arguments are already escaped\n    }\n\n    return parsed;\n}\n\nfunction parse(command, args, options) {\n    // Normalize arguments, similar to nodejs\n    if (args && !Array.isArray(args)) {\n        options = args;\n        args = null;\n    }\n\n    args = args ? args.slice(0) : []; // Clone array to avoid changing the original\n    options = Object.assign({}, options); // Clone object to avoid changing the original\n\n    // Build our parsed object\n    const parsed = {\n        command,\n        args,\n        options,\n        file: undefined,\n        original: {\n            command,\n            args,\n        },\n    };\n\n    // Delegate further parsing to shell or non-shell\n    return options.shell ? parsed : parseNonShell(parsed);\n}\n\nmodule.exports = parse;\n", "'use strict';\n\nconst isWin = process.platform === 'win32';\n\nfunction notFoundError(original, syscall) {\n    return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {\n        code: 'ENOENT',\n        errno: 'ENOENT',\n        syscall: `${syscall} ${original.command}`,\n        path: original.command,\n        spawnargs: original.args,\n    });\n}\n\nfunction hookChildProcess(cp, parsed) {\n    if (!isWin) {\n        return;\n    }\n\n    const originalEmit = cp.emit;\n\n    cp.emit = function (name, arg1) {\n        // If emitting \"exit\" event and exit code is 1, we need to check if\n        // the command exists and emit an \"error\" instead\n        // See https://github.com/IndigoUnited/node-cross-spawn/issues/16\n        if (name === 'exit') {\n            const err = verifyENOENT(arg1, parsed, 'spawn');\n\n            if (err) {\n                return originalEmit.call(cp, 'error', err);\n            }\n        }\n\n        return originalEmit.apply(cp, arguments); // eslint-disable-line prefer-rest-params\n    };\n}\n\nfunction verifyENOENT(status, parsed) {\n    if (isWin && status === 1 && !parsed.file) {\n        return notFoundError(parsed.original, 'spawn');\n    }\n\n    return null;\n}\n\nfunction verifyENOENTSync(status, parsed) {\n    if (isWin && status === 1 && !parsed.file) {\n        return notFoundError(parsed.original, 'spawnSync');\n    }\n\n    return null;\n}\n\nmodule.exports = {\n    hookChildProcess,\n    verifyENOENT,\n    verifyENOENTSync,\n    notFoundError,\n};\n", "'use strict';\n\nconst cp = require('child_process');\nconst parse = require('./lib/parse');\nconst enoent = require('./lib/enoent');\n\nfunction spawn(command, args, options) {\n    // Parse the arguments\n    const parsed = parse(command, args, options);\n\n    // Spawn the child process\n    const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);\n\n    // Hook into child process \"exit\" event to emit an error if the command\n    // does not exists, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16\n    enoent.hookChildProcess(spawned, parsed);\n\n    return spawned;\n}\n\nfunction spawnSync(command, args, options) {\n    // Parse the arguments\n    const parsed = parse(command, args, options);\n\n    // Spawn the child process\n    const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);\n\n    // Analyze if the command does not exist, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16\n    result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);\n\n    return result;\n}\n\nmodule.exports = spawn;\nmodule.exports.spawn = spawn;\nmodule.exports.sync = spawnSync;\n\nmodule.exports._parse = parse;\nmodule.exports._enoent = enoent;\n", "'use strict';\n\nmodule.exports = input => {\n\tconst LF = typeof input === 'string' ? '\\n' : '\\n'.charCodeAt();\n\tconst CR = typeof input === 'string' ? '\\r' : '\\r'.charCodeAt();\n\n\tif (input[input.length - 1] === LF) {\n\t\tinput = input.slice(0, input.length - 1);\n\t}\n\n\tif (input[input.length - 1] === CR) {\n\t\tinput = input.slice(0, input.length - 1);\n\t}\n\n\treturn input;\n};\n", "'use strict';\nconst path = require('path');\nconst pathKey = require('path-key');\n\nconst npmRunPath = options => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\tpath: process.env[pathKey()],\n\t\texecPath: process.execPath,\n\t\t...options\n\t};\n\n\tlet previous;\n\tlet cwdPath = path.resolve(options.cwd);\n\tconst result = [];\n\n\twhile (previous !== cwdPath) {\n\t\tresult.push(path.join(cwdPath, 'node_modules/.bin'));\n\t\tprevious = cwdPath;\n\t\tcwdPath = path.resolve(cwdPath, '..');\n\t}\n\n\t// Ensure the running `node` binary is used\n\tconst execPathDir = path.resolve(options.cwd, options.execPath, '..');\n\tresult.push(execPathDir);\n\n\treturn result.concat(options.path).join(path.delimiter);\n};\n\nmodule.exports = npmRunPath;\n// TODO: Remove this for the next major release\nmodule.exports.default = npmRunPath;\n\nmodule.exports.env = options => {\n\toptions = {\n\t\tenv: process.env,\n\t\t...options\n\t};\n\n\tconst env = {...options.env};\n\tconst path = pathKey({env});\n\n\toptions.path = env[path];\n\tenv[path] = module.exports(options);\n\n\treturn env;\n};\n", "'use strict';\n\nconst mimicFn = (to, from) => {\n\tfor (const prop of Reflect.ownKeys(from)) {\n\t\tObject.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));\n\t}\n\n\treturn to;\n};\n\nmodule.exports = mimicFn;\n// TODO: Remove this for the next major release\nmodule.exports.default = mimicFn;\n", "'use strict';\nconst mimicFn = require('mimic-fn');\n\nconst calledFunctions = new WeakMap();\n\nconst onetime = (function_, options = {}) => {\n\tif (typeof function_ !== 'function') {\n\t\tthrow new TypeError('Expected a function');\n\t}\n\n\tlet returnValue;\n\tlet callCount = 0;\n\tconst functionName = function_.displayName || function_.name || '<anonymous>';\n\n\tconst onetime = function (...arguments_) {\n\t\tcalledFunctions.set(onetime, ++callCount);\n\n\t\tif (callCount === 1) {\n\t\t\treturnValue = function_.apply(this, arguments_);\n\t\t\tfunction_ = null;\n\t\t} else if (options.throw === true) {\n\t\t\tthrow new Error(`Function \\`${functionName}\\` can only be called once`);\n\t\t}\n\n\t\treturn returnValue;\n\t};\n\n\tmimicFn(onetime, function_);\n\tcalledFunctions.set(onetime, callCount);\n\n\treturn onetime;\n};\n\nmodule.exports = onetime;\n// TODO: Remove this for the next major release\nmodule.exports.default = onetime;\n\nmodule.exports.callCount = function_ => {\n\tif (!calledFunctions.has(function_)) {\n\t\tthrow new Error(`The given function \\`${function_.name}\\` is not wrapped by the \\`onetime\\` package`);\n\t}\n\n\treturn calledFunctions.get(function_);\n};\n", "/* eslint-disable max-lines */\n// List of known process signals with information about them\nexport const SIGNALS = [\n  {\n    name: 'SIGHUP',\n    number: 1,\n    action: 'terminate',\n    description: 'Terminal closed',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGINT',\n    number: 2,\n    action: 'terminate',\n    description: 'User interruption with CTRL-C',\n    standard: 'ansi',\n  },\n  {\n    name: 'SIGQUIT',\n    number: 3,\n    action: 'core',\n    description: 'User interruption with CTRL-\\\\',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGILL',\n    number: 4,\n    action: 'core',\n    description: 'Invalid machine instruction',\n    standard: 'ansi',\n  },\n  {\n    name: 'SIGTRAP',\n    number: 5,\n    action: 'core',\n    description: 'Debugger breakpoint',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGABRT',\n    number: 6,\n    action: 'core',\n    description: 'Aborted',\n    standard: 'ansi',\n  },\n  {\n    name: 'SIGIOT',\n    number: 6,\n    action: 'core',\n    description: 'Aborted',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGBUS',\n    number: 7,\n    action: 'core',\n    description:\n      'Bus error due to misaligned, non-existing address or paging error',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGEMT',\n    number: 7,\n    action: 'terminate',\n    description: 'Command should be emulated but is not implemented',\n    standard: 'other',\n  },\n  {\n    name: 'SIGFPE',\n    number: 8,\n    action: 'core',\n    description: 'Floating point arithmetic error',\n    standard: 'ansi',\n  },\n  {\n    name: 'SIGKILL',\n    number: 9,\n    action: 'terminate',\n    description: 'Forced termination',\n    standard: 'posix',\n    forced: true,\n  },\n  {\n    name: 'SIGUSR1',\n    number: 10,\n    action: 'terminate',\n    description: 'Application-specific signal',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGSEGV',\n    number: 11,\n    action: 'core',\n    description: 'Segmentation fault',\n    standard: 'ansi',\n  },\n  {\n    name: 'SIGUSR2',\n    number: 12,\n    action: 'terminate',\n    description: 'Application-specific signal',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGPIPE',\n    number: 13,\n    action: 'terminate',\n    description: 'Broken pipe or socket',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGALRM',\n    number: 14,\n    action: 'terminate',\n    description: 'Timeout or timer',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGTERM',\n    number: 15,\n    action: 'terminate',\n    description: 'Termination',\n    standard: 'ansi',\n  },\n  {\n    name: 'SIGSTKFLT',\n    number: 16,\n    action: 'terminate',\n    description: 'Stack is empty or overflowed',\n    standard: 'other',\n  },\n  {\n    name: 'SIGCHLD',\n    number: 17,\n    action: 'ignore',\n    description: 'Child process terminated, paused or unpaused',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGCLD',\n    number: 17,\n    action: 'ignore',\n    description: 'Child process terminated, paused or unpaused',\n    standard: 'other',\n  },\n  {\n    name: 'SIGCONT',\n    number: 18,\n    action: 'unpause',\n    description: 'Unpaused',\n    standard: 'posix',\n    forced: true,\n  },\n  {\n    name: 'SIGSTOP',\n    number: 19,\n    action: 'pause',\n    description: 'Paused',\n    standard: 'posix',\n    forced: true,\n  },\n  {\n    name: 'SIGTSTP',\n    number: 20,\n    action: 'pause',\n    description: 'Paused using CTRL-Z or \"suspend\"',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGTTIN',\n    number: 21,\n    action: 'pause',\n    description: 'Background process cannot read terminal input',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGBREAK',\n    number: 21,\n    action: 'terminate',\n    description: 'User interruption with CTRL-BREAK',\n    standard: 'other',\n  },\n  {\n    name: 'SIGTTOU',\n    number: 22,\n    action: 'pause',\n    description: 'Background process cannot write to terminal output',\n    standard: 'posix',\n  },\n  {\n    name: 'SIGURG',\n    number: 23,\n    action: 'ignore',\n    description: 'Socket received out-of-band data',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGXCPU',\n    number: 24,\n    action: 'core',\n    description: 'Process timed out',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGXFSZ',\n    number: 25,\n    action: 'core',\n    description: 'File too big',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGVTALRM',\n    number: 26,\n    action: 'terminate',\n    description: 'Timeout or timer',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGPROF',\n    number: 27,\n    action: 'terminate',\n    description: 'Timeout or timer',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGWINCH',\n    number: 28,\n    action: 'ignore',\n    description: 'Terminal window size changed',\n    standard: 'bsd',\n  },\n  {\n    name: 'SIGIO',\n    number: 29,\n    action: 'terminate',\n    description: 'I/O is available',\n    standard: 'other',\n  },\n  {\n    name: 'SIGPOLL',\n    number: 29,\n    action: 'terminate',\n    description: 'Watched event',\n    standard: 'other',\n  },\n  {\n    name: 'SIGINFO',\n    number: 29,\n    action: 'ignore',\n    description: 'Request for process information',\n    standard: 'other',\n  },\n  {\n    name: 'SIGPWR',\n    number: 30,\n    action: 'terminate',\n    description: 'Device running out of power',\n    standard: 'systemv',\n  },\n  {\n    name: 'SIGSYS',\n    number: 31,\n    action: 'core',\n    description: 'Invalid system call',\n    standard: 'other',\n  },\n  {\n    name: 'SIGUNUSED',\n    number: 31,\n    action: 'terminate',\n    description: 'Invalid system call',\n    standard: 'other',\n  },\n]\n/* eslint-enable max-lines */\n", "// List of realtime signals with information about them\nexport const getRealtimeSignals = function() {\n  const length = SIGRTMAX - SIGRTMIN + 1\n  return Array.from({ length }, getRealtimeSignal)\n}\n\nconst getRealtimeSignal = function(value, index) {\n  return {\n    name: `SIGRT${index + 1}`,\n    number: SIGRTMIN + index,\n    action: 'terminate',\n    description: 'Application-specific signal (realtime)',\n    standard: 'posix',\n  }\n}\n\nconst SIGRTMIN = 34\nexport const SIGRTMAX = 64\n", "import { constants } from 'os'\n\nimport { SIGNALS } from './core.js'\nimport { getRealtimeSignals } from './realtime.js'\n\n// Retrieve list of know signals (including realtime) with information about\n// them\nexport const getSignals = function() {\n  const realtimeSignals = getRealtimeSignals()\n  const signals = [...SIGNALS, ...realtimeSignals].map(normalizeSignal)\n  return signals\n}\n\n// Normalize signal:\n//  - `number`: signal numbers are OS-specific. This is taken into account by\n//    `os.constants.signals`. However we provide a default `number` since some\n//     signals are not defined for some OS.\n//  - `forced`: set default to `false`\n//  - `supported`: set value\nconst normalizeSignal = function({\n  name,\n  number: defaultNumber,\n  description,\n  action,\n  forced = false,\n  standard,\n}) {\n  const {\n    signals: { [name]: constantSignal },\n  } = constants\n  const supported = constantSignal !== undefined\n  const number = supported ? constantSignal : defaultNumber\n  return { name, number, description, supported, action, forced, standard }\n}\n", "import { constants } from 'os'\n\nimport { getSignals } from './signals.js'\nimport { SIGRTMAX } from './realtime.js'\n\n// Retrieve `signalsByName`, an object mapping signal name to signal properties.\n// We make sure the object is sorted by `number`.\nconst getSignalsByName = function() {\n  const signals = getSignals()\n  return signals.reduce(getSignalByName, {})\n}\n\nconst getSignalByName = function(\n  signalByNameMemo,\n  { name, number, description, supported, action, forced, standard },\n) {\n  return {\n    ...signalByNameMemo,\n    [name]: { name, number, description, supported, action, forced, standard },\n  }\n}\n\nexport const signalsByName = getSignalsByName()\n\n// Retrieve `signalsByNumber`, an object mapping signal number to signal\n// properties.\n// We make sure the object is sorted by `number`.\nconst getSignalsByNumber = function() {\n  const signals = getSignals()\n  const length = SIGRTMAX + 1\n  const signalsA = Array.from({ length }, (value, number) =>\n    getSignalByNumber(number, signals),\n  )\n  return Object.assign({}, ...signalsA)\n}\n\nconst getSignalByNumber = function(number, signals) {\n  const signal = findSignalByNumber(number, signals)\n\n  if (signal === undefined) {\n    return {}\n  }\n\n  const { name, description, supported, action, forced, standard } = signal\n  return {\n    [number]: {\n      name,\n      number,\n      description,\n      supported,\n      action,\n      forced,\n      standard,\n    },\n  }\n}\n\n// Several signals might end up sharing the same number because of OS-specific\n// numbers, in which case those prevail.\nconst findSignalByNumber = function(number, signals) {\n  const signal = signals.find(({ name }) => constants.signals[name] === number)\n\n  if (signal !== undefined) {\n    return signal\n  }\n\n  return signals.find(signalA => signalA.number === number)\n}\n\nexport const signalsByNumber = getSignalsByNumber()\n", "'use strict';\nconst {signalsByName} = require('human-signals');\n\nconst getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {\n\tif (timedOut) {\n\t\treturn `timed out after ${timeout} milliseconds`;\n\t}\n\n\tif (isCanceled) {\n\t\treturn 'was canceled';\n\t}\n\n\tif (errorCode !== undefined) {\n\t\treturn `failed with ${errorCode}`;\n\t}\n\n\tif (signal !== undefined) {\n\t\treturn `was killed with ${signal} (${signalDescription})`;\n\t}\n\n\tif (exitCode !== undefined) {\n\t\treturn `failed with exit code ${exitCode}`;\n\t}\n\n\treturn 'failed';\n};\n\nconst makeError = ({\n\tstdout,\n\tstderr,\n\tall,\n\terror,\n\tsignal,\n\texitCode,\n\tcommand,\n\tescapedCommand,\n\ttimedOut,\n\tisCanceled,\n\tkilled,\n\tparsed: {options: {timeout}}\n}) => {\n\t// `signal` and `exitCode` emitted on `spawned.on('exit')` event can be `null`.\n\t// We normalize them to `undefined`\n\texitCode = exitCode === null ? undefined : exitCode;\n\tsignal = signal === null ? undefined : signal;\n\tconst signalDescription = signal === undefined ? undefined : signalsByName[signal].description;\n\n\tconst errorCode = error && error.code;\n\n\tconst prefix = getErrorPrefix({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled});\n\tconst execaMessage = `Command ${prefix}: ${command}`;\n\tconst isError = Object.prototype.toString.call(error) === '[object Error]';\n\tconst shortMessage = isError ? `${execaMessage}\\n${error.message}` : execaMessage;\n\tconst message = [shortMessage, stderr, stdout].filter(Boolean).join('\\n');\n\n\tif (isError) {\n\t\terror.originalMessage = error.message;\n\t\terror.message = message;\n\t} else {\n\t\terror = new Error(message);\n\t}\n\n\terror.shortMessage = shortMessage;\n\terror.command = command;\n\terror.escapedCommand = escapedCommand;\n\terror.exitCode = exitCode;\n\terror.signal = signal;\n\terror.signalDescription = signalDescription;\n\terror.stdout = stdout;\n\terror.stderr = stderr;\n\n\tif (all !== undefined) {\n\t\terror.all = all;\n\t}\n\n\tif ('bufferedData' in error) {\n\t\tdelete error.bufferedData;\n\t}\n\n\terror.failed = true;\n\terror.timedOut = Boolean(timedOut);\n\terror.isCanceled = isCanceled;\n\terror.killed = killed && !timedOut;\n\n\treturn error;\n};\n\nmodule.exports = makeError;\n", "'use strict';\nconst aliases = ['stdin', 'stdout', 'stderr'];\n\nconst hasAlias = options => aliases.some(alias => options[alias] !== undefined);\n\nconst normalizeStdio = options => {\n\tif (!options) {\n\t\treturn;\n\t}\n\n\tconst {stdio} = options;\n\n\tif (stdio === undefined) {\n\t\treturn aliases.map(alias => options[alias]);\n\t}\n\n\tif (hasAlias(options)) {\n\t\tthrow new Error(`It's not possible to provide \\`stdio\\` in combination with one of ${aliases.map(alias => `\\`${alias}\\``).join(', ')}`);\n\t}\n\n\tif (typeof stdio === 'string') {\n\t\treturn stdio;\n\t}\n\n\tif (!Array.isArray(stdio)) {\n\t\tthrow new TypeError(`Expected \\`stdio\\` to be of type \\`string\\` or \\`Array\\`, got \\`${typeof stdio}\\``);\n\t}\n\n\tconst length = Math.max(stdio.length, aliases.length);\n\treturn Array.from({length}, (value, index) => stdio[index]);\n};\n\nmodule.exports = normalizeStdio;\n\n// `ipc` is pushed unless it is already present\nmodule.exports.node = options => {\n\tconst stdio = normalizeStdio(options);\n\n\tif (stdio === 'ipc') {\n\t\treturn 'ipc';\n\t}\n\n\tif (stdio === undefined || typeof stdio === 'string') {\n\t\treturn [stdio, stdio, stdio, 'ipc'];\n\t}\n\n\tif (stdio.includes('ipc')) {\n\t\treturn stdio;\n\t}\n\n\treturn [...stdio, 'ipc'];\n};\n", "// This is not the set of all possible signals.\n//\n// It IS, however, the set of all signals that trigger\n// an exit on either Linux or BSD systems.  Linux is a\n// superset of the signal names supported on BSD, and\n// the unknown signals just fail to register, so we can\n// catch that easily enough.\n//\n// Don't bother with SIGKILL.  It's uncatchable, which\n// means that we can't fire any callbacks anyway.\n//\n// If a user does happen to register a handler on a non-\n// fatal signal like SIGWINCH or something, and then\n// exit, it'll end up firing `process.emit('exit')`, so\n// the handler will be fired anyway.\n//\n// SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised\n// artificially, inherently leave the process in a\n// state from which it is not safe to try and enter JS\n// listeners.\nmodule.exports = [\n  'SIGABRT',\n  'SIGALRM',\n  'SIGHUP',\n  'SIGINT',\n  'SIGTERM'\n]\n\nif (process.platform !== 'win32') {\n  module.exports.push(\n    'SIGVTALRM',\n    'SIGXCPU',\n    'SIGXFSZ',\n    'SIGUSR2',\n    'SIGTRAP',\n    'SIGSYS',\n    'SIGQUIT',\n    'SIGIOT'\n    // should detect profiler and enable/disable accordingly.\n    // see #21\n    // 'SIGPROF'\n  )\n}\n\nif (process.platform === 'linux') {\n  module.exports.push(\n    'SIGIO',\n    'SIGPOLL',\n    'SIGPWR',\n    'SIGSTKFLT',\n    'SIGUNUSED'\n  )\n}\n", "// Note: since nyc uses this module to output coverage, any lines\n// that are in the direct sync flow of nyc's outputCoverage are\n// ignored, since we can never get coverage for them.\n// grab a reference to node's real process object right away\nvar process = global.process\n\nconst processOk = function (process) {\n  return process &&\n    typeof process === 'object' &&\n    typeof process.removeListener === 'function' &&\n    typeof process.emit === 'function' &&\n    typeof process.reallyExit === 'function' &&\n    typeof process.listeners === 'function' &&\n    typeof process.kill === 'function' &&\n    typeof process.pid === 'number' &&\n    typeof process.on === 'function'\n}\n\n// some kind of non-node environment, just no-op\n/* istanbul ignore if */\nif (!processOk(process)) {\n  module.exports = function () {\n    return function () {}\n  }\n} else {\n  var assert = require('assert')\n  var signals = require('./signals.js')\n  var isWin = /^win/i.test(process.platform)\n\n  var EE = require('events')\n  /* istanbul ignore if */\n  if (typeof EE !== 'function') {\n    EE = EE.EventEmitter\n  }\n\n  var emitter\n  if (process.__signal_exit_emitter__) {\n    emitter = process.__signal_exit_emitter__\n  } else {\n    emitter = process.__signal_exit_emitter__ = new EE()\n    emitter.count = 0\n    emitter.emitted = {}\n  }\n\n  // Because this emitter is a global, we have to check to see if a\n  // previous version of this library failed to enable infinite listeners.\n  // I know what you're about to say.  But literally everything about\n  // signal-exit is a compromise with evil.  Get used to it.\n  if (!emitter.infinite) {\n    emitter.setMaxListeners(Infinity)\n    emitter.infinite = true\n  }\n\n  module.exports = function (cb, opts) {\n    /* istanbul ignore if */\n    if (!processOk(global.process)) {\n      return function () {}\n    }\n    assert.equal(typeof cb, 'function', 'a callback must be provided for exit handler')\n\n    if (loaded === false) {\n      load()\n    }\n\n    var ev = 'exit'\n    if (opts && opts.alwaysLast) {\n      ev = 'afterexit'\n    }\n\n    var remove = function () {\n      emitter.removeListener(ev, cb)\n      if (emitter.listeners('exit').length === 0 &&\n          emitter.listeners('afterexit').length === 0) {\n        unload()\n      }\n    }\n    emitter.on(ev, cb)\n\n    return remove\n  }\n\n  var unload = function unload () {\n    if (!loaded || !processOk(global.process)) {\n      return\n    }\n    loaded = false\n\n    signals.forEach(function (sig) {\n      try {\n        process.removeListener(sig, sigListeners[sig])\n      } catch (er) {}\n    })\n    process.emit = originalProcessEmit\n    process.reallyExit = originalProcessReallyExit\n    emitter.count -= 1\n  }\n  module.exports.unload = unload\n\n  var emit = function emit (event, code, signal) {\n    /* istanbul ignore if */\n    if (emitter.emitted[event]) {\n      return\n    }\n    emitter.emitted[event] = true\n    emitter.emit(event, code, signal)\n  }\n\n  // { <signal>: <listener fn>, ... }\n  var sigListeners = {}\n  signals.forEach(function (sig) {\n    sigListeners[sig] = function listener () {\n      /* istanbul ignore if */\n      if (!processOk(global.process)) {\n        return\n      }\n      // If there are no other listeners, an exit is coming!\n      // Simplest way: remove us and then re-send the signal.\n      // We know that this will kill the process, so we can\n      // safely emit now.\n      var listeners = process.listeners(sig)\n      if (listeners.length === emitter.count) {\n        unload()\n        emit('exit', null, sig)\n        /* istanbul ignore next */\n        emit('afterexit', null, sig)\n        /* istanbul ignore next */\n        if (isWin && sig === 'SIGHUP') {\n          // \"SIGHUP\" throws an `ENOSYS` error on Windows,\n          // so use a supported signal instead\n          sig = 'SIGINT'\n        }\n        /* istanbul ignore next */\n        process.kill(process.pid, sig)\n      }\n    }\n  })\n\n  module.exports.signals = function () {\n    return signals\n  }\n\n  var loaded = false\n\n  var load = function load () {\n    if (loaded || !processOk(global.process)) {\n      return\n    }\n    loaded = true\n\n    // This is the number of onSignalExit's that are in play.\n    // It's important so that we can count the correct number of\n    // listeners on signals, and don't wait for the other one to\n    // handle it instead of us.\n    emitter.count += 1\n\n    signals = signals.filter(function (sig) {\n      try {\n        process.on(sig, sigListeners[sig])\n        return true\n      } catch (er) {\n        return false\n      }\n    })\n\n    process.emit = processEmit\n    process.reallyExit = processReallyExit\n  }\n  module.exports.load = load\n\n  var originalProcessReallyExit = process.reallyExit\n  var processReallyExit = function processReallyExit (code) {\n    /* istanbul ignore if */\n    if (!processOk(global.process)) {\n      return\n    }\n    process.exitCode = code || /* istanbul ignore next */ 0\n    emit('exit', process.exitCode, null)\n    /* istanbul ignore next */\n    emit('afterexit', process.exitCode, null)\n    /* istanbul ignore next */\n    originalProcessReallyExit.call(process, process.exitCode)\n  }\n\n  var originalProcessEmit = process.emit\n  var processEmit = function processEmit (ev, arg) {\n    if (ev === 'exit' && processOk(global.process)) {\n      /* istanbul ignore else */\n      if (arg !== undefined) {\n        process.exitCode = arg\n      }\n      var ret = originalProcessEmit.apply(this, arguments)\n      /* istanbul ignore next */\n      emit('exit', process.exitCode, null)\n      /* istanbul ignore next */\n      emit('afterexit', process.exitCode, null)\n      /* istanbul ignore next */\n      return ret\n    } else {\n      return originalProcessEmit.apply(this, arguments)\n    }\n  }\n}\n", "'use strict';\nconst os = require('os');\nconst onExit = require('signal-exit');\n\nconst DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;\n\n// Monkey-patches `childProcess.kill()` to add `forceKillAfterTimeout` behavior\nconst spawnedKill = (kill, signal = 'SIGTERM', options = {}) => {\n\tconst killResult = kill(signal);\n\tsetKillTimeout(kill, signal, options, killResult);\n\treturn killResult;\n};\n\nconst setKillTimeout = (kill, signal, options, killResult) => {\n\tif (!shouldForceKill(signal, options, killResult)) {\n\t\treturn;\n\t}\n\n\tconst timeout = getForceKillAfterTimeout(options);\n\tconst t = setTimeout(() => {\n\t\tkill('SIGKILL');\n\t}, timeout);\n\n\t// Guarded because there's no `.unref()` when `execa` is used in the renderer\n\t// process in Electron. This cannot be tested since we don't run tests in\n\t// Electron.\n\t// istanbul ignore else\n\tif (t.unref) {\n\t\tt.unref();\n\t}\n};\n\nconst shouldForceKill = (signal, {forceKillAfterTimeout}, killResult) => {\n\treturn isSigterm(signal) && forceKillAfterTimeout !== false && killResult;\n};\n\nconst isSigterm = signal => {\n\treturn signal === os.constants.signals.SIGTERM ||\n\t\t(typeof signal === 'string' && signal.toUpperCase() === 'SIGTERM');\n};\n\nconst getForceKillAfterTimeout = ({forceKillAfterTimeout = true}) => {\n\tif (forceKillAfterTimeout === true) {\n\t\treturn DEFAULT_FORCE_KILL_TIMEOUT;\n\t}\n\n\tif (!Number.isFinite(forceKillAfterTimeout) || forceKillAfterTimeout < 0) {\n\t\tthrow new TypeError(`Expected the \\`forceKillAfterTimeout\\` option to be a non-negative integer, got \\`${forceKillAfterTimeout}\\` (${typeof forceKillAfterTimeout})`);\n\t}\n\n\treturn forceKillAfterTimeout;\n};\n\n// `childProcess.cancel()`\nconst spawnedCancel = (spawned, context) => {\n\tconst killResult = spawned.kill();\n\n\tif (killResult) {\n\t\tcontext.isCanceled = true;\n\t}\n};\n\nconst timeoutKill = (spawned, signal, reject) => {\n\tspawned.kill(signal);\n\treject(Object.assign(new Error('Timed out'), {timedOut: true, signal}));\n};\n\n// `timeout` option handling\nconst setupTimeout = (spawned, {timeout, killSignal = 'SIGTERM'}, spawnedPromise) => {\n\tif (timeout === 0 || timeout === undefined) {\n\t\treturn spawnedPromise;\n\t}\n\n\tlet timeoutId;\n\tconst timeoutPromise = new Promise((resolve, reject) => {\n\t\ttimeoutId = setTimeout(() => {\n\t\t\ttimeoutKill(spawned, killSignal, reject);\n\t\t}, timeout);\n\t});\n\n\tconst safeSpawnedPromise = spawnedPromise.finally(() => {\n\t\tclearTimeout(timeoutId);\n\t});\n\n\treturn Promise.race([timeoutPromise, safeSpawnedPromise]);\n};\n\nconst validateTimeout = ({timeout}) => {\n\tif (timeout !== undefined && (!Number.isFinite(timeout) || timeout < 0)) {\n\t\tthrow new TypeError(`Expected the \\`timeout\\` option to be a non-negative integer, got \\`${timeout}\\` (${typeof timeout})`);\n\t}\n};\n\n// `cleanup` option handling\nconst setExitHandler = async (spawned, {cleanup, detached}, timedPromise) => {\n\tif (!cleanup || detached) {\n\t\treturn timedPromise;\n\t}\n\n\tconst removeExitHandler = onExit(() => {\n\t\tspawned.kill();\n\t});\n\n\treturn timedPromise.finally(() => {\n\t\tremoveExitHandler();\n\t});\n};\n\nmodule.exports = {\n\tspawnedKill,\n\tspawnedCancel,\n\tsetupTimeout,\n\tvalidateTimeout,\n\tsetExitHandler\n};\n", "'use strict';\n\nconst isStream = stream =>\n\tstream !== null &&\n\ttypeof stream === 'object' &&\n\ttypeof stream.pipe === 'function';\n\nisStream.writable = stream =>\n\tisStream(stream) &&\n\tstream.writable !== false &&\n\ttypeof stream._write === 'function' &&\n\ttypeof stream._writableState === 'object';\n\nisStream.readable = stream =>\n\tisStream(stream) &&\n\tstream.readable !== false &&\n\ttypeof stream._read === 'function' &&\n\ttypeof stream._readableState === 'object';\n\nisStream.duplex = stream =>\n\tisStream.writable(stream) &&\n\tisStream.readable(stream);\n\nisStream.transform = stream =>\n\tisStream.duplex(stream) &&\n\ttypeof stream._transform === 'function';\n\nmodule.exports = isStream;\n", "'use strict';\nconst {PassThrough: PassThroughStream} = require('stream');\n\nmodule.exports = options => {\n\toptions = {...options};\n\n\tconst {array} = options;\n\tlet {encoding} = options;\n\tconst isBuffer = encoding === 'buffer';\n\tlet objectMode = false;\n\n\tif (array) {\n\t\tobjectMode = !(encoding || isBuffer);\n\t} else {\n\t\tencoding = encoding || 'utf8';\n\t}\n\n\tif (isBuffer) {\n\t\tencoding = null;\n\t}\n\n\tconst stream = new PassThroughStream({objectMode});\n\n\tif (encoding) {\n\t\tstream.setEncoding(encoding);\n\t}\n\n\tlet length = 0;\n\tconst chunks = [];\n\n\tstream.on('data', chunk => {\n\t\tchunks.push(chunk);\n\n\t\tif (objectMode) {\n\t\t\tlength = chunks.length;\n\t\t} else {\n\t\t\tlength += chunk.length;\n\t\t}\n\t});\n\n\tstream.getBufferedValue = () => {\n\t\tif (array) {\n\t\t\treturn chunks;\n\t\t}\n\n\t\treturn isBuffer ? Buffer.concat(chunks, length) : chunks.join('');\n\t};\n\n\tstream.getBufferedLength = () => length;\n\n\treturn stream;\n};\n", "'use strict';\nconst {constants: BufferConstants} = require('buffer');\nconst stream = require('stream');\nconst {promisify} = require('util');\nconst bufferStream = require('./buffer-stream');\n\nconst streamPipelinePromisified = promisify(stream.pipeline);\n\nclass MaxBufferError extends Error {\n\tconstructor() {\n\t\tsuper('maxBuffer exceeded');\n\t\tthis.name = 'MaxBufferError';\n\t}\n}\n\nasync function getStream(inputStream, options) {\n\tif (!inputStream) {\n\t\tthrow new Error('Expected a stream');\n\t}\n\n\toptions = {\n\t\tmaxBuffer: Infinity,\n\t\t...options\n\t};\n\n\tconst {maxBuffer} = options;\n\tconst stream = bufferStream(options);\n\n\tawait new Promise((resolve, reject) => {\n\t\tconst rejectPromise = error => {\n\t\t\t// Don't retrieve an oversized buffer.\n\t\t\tif (error && stream.getBufferedLength() <= BufferConstants.MAX_LENGTH) {\n\t\t\t\terror.bufferedData = stream.getBufferedValue();\n\t\t\t}\n\n\t\t\treject(error);\n\t\t};\n\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tawait streamPipelinePromisified(inputStream, stream);\n\t\t\t\tresolve();\n\t\t\t} catch (error) {\n\t\t\t\trejectPromise(error);\n\t\t\t}\n\t\t})();\n\n\t\tstream.on('data', () => {\n\t\t\tif (stream.getBufferedLength() > maxBuffer) {\n\t\t\t\trejectPromise(new MaxBufferError());\n\t\t\t}\n\t\t});\n\t});\n\n\treturn stream.getBufferedValue();\n}\n\nmodule.exports = getStream;\nmodule.exports.buffer = (stream, options) => getStream(stream, {...options, encoding: 'buffer'});\nmodule.exports.array = (stream, options) => getStream(stream, {...options, array: true});\nmodule.exports.MaxBufferError = MaxBufferError;\n", "'use strict';\n\nconst { PassThrough } = require('stream');\n\nmodule.exports = function (/*streams...*/) {\n  var sources = []\n  var output  = new PassThrough({objectMode: true})\n\n  output.setMaxListeners(0)\n\n  output.add = add\n  output.isEmpty = isEmpty\n\n  output.on('unpipe', remove)\n\n  Array.prototype.slice.call(arguments).forEach(add)\n\n  return output\n\n  function add (source) {\n    if (Array.isArray(source)) {\n      source.forEach(add)\n      return this\n    }\n\n    sources.push(source);\n    source.once('end', remove.bind(null, source))\n    source.once('error', output.emit.bind(output, 'error'))\n    source.pipe(output, {end: false})\n    return this\n  }\n\n  function isEmpty () {\n    return sources.length == 0;\n  }\n\n  function remove (source) {\n    sources = sources.filter(function (it) { return it !== source })\n    if (!sources.length && output.readable) { output.end() }\n  }\n}\n", "'use strict';\nconst isStream = require('is-stream');\nconst getStream = require('get-stream');\nconst mergeStream = require('merge-stream');\n\n// `input` option\nconst handleInput = (spawned, input) => {\n\t// Checking for stdin is workaround for https://github.com/nodejs/node/issues/26852\n\t// @todo remove `|| spawned.stdin === undefined` once we drop support for Node.js <=12.2.0\n\tif (input === undefined || spawned.stdin === undefined) {\n\t\treturn;\n\t}\n\n\tif (isStream(input)) {\n\t\tinput.pipe(spawned.stdin);\n\t} else {\n\t\tspawned.stdin.end(input);\n\t}\n};\n\n// `all` interleaves `stdout` and `stderr`\nconst makeAllStream = (spawned, {all}) => {\n\tif (!all || (!spawned.stdout && !spawned.stderr)) {\n\t\treturn;\n\t}\n\n\tconst mixed = mergeStream();\n\n\tif (spawned.stdout) {\n\t\tmixed.add(spawned.stdout);\n\t}\n\n\tif (spawned.stderr) {\n\t\tmixed.add(spawned.stderr);\n\t}\n\n\treturn mixed;\n};\n\n// On failure, `result.stdout|stderr|all` should contain the currently buffered stream\nconst getBufferedData = async (stream, streamPromise) => {\n\tif (!stream) {\n\t\treturn;\n\t}\n\n\tstream.destroy();\n\n\ttry {\n\t\treturn await streamPromise;\n\t} catch (error) {\n\t\treturn error.bufferedData;\n\t}\n};\n\nconst getStreamPromise = (stream, {encoding, buffer, maxBuffer}) => {\n\tif (!stream || !buffer) {\n\t\treturn;\n\t}\n\n\tif (encoding) {\n\t\treturn getStream(stream, {encoding, maxBuffer});\n\t}\n\n\treturn getStream.buffer(stream, {maxBuffer});\n};\n\n// Retrieve result of child process: exit code, signal, error, streams (stdout/stderr/all)\nconst getSpawnedResult = async ({stdout, stderr, all}, {encoding, buffer, maxBuffer}, processDone) => {\n\tconst stdoutPromise = getStreamPromise(stdout, {encoding, buffer, maxBuffer});\n\tconst stderrPromise = getStreamPromise(stderr, {encoding, buffer, maxBuffer});\n\tconst allPromise = getStreamPromise(all, {encoding, buffer, maxBuffer: maxBuffer * 2});\n\n\ttry {\n\t\treturn await Promise.all([processDone, stdoutPromise, stderrPromise, allPromise]);\n\t} catch (error) {\n\t\treturn Promise.all([\n\t\t\t{error, signal: error.signal, timedOut: error.timedOut},\n\t\t\tgetBufferedData(stdout, stdoutPromise),\n\t\t\tgetBufferedData(stderr, stderrPromise),\n\t\t\tgetBufferedData(all, allPromise)\n\t\t]);\n\t}\n};\n\nconst validateInputSync = ({input}) => {\n\tif (isStream(input)) {\n\t\tthrow new TypeError('The `input` option cannot be a stream in sync mode');\n\t}\n};\n\nmodule.exports = {\n\thandleInput,\n\tmakeAllStream,\n\tgetSpawnedResult,\n\tvalidateInputSync\n};\n\n", "'use strict';\n\nconst nativePromisePrototype = (async () => {})().constructor.prototype;\nconst descriptors = ['then', 'catch', 'finally'].map(property => [\n\tproperty,\n\tReflect.getOwnPropertyDescriptor(nativePromisePrototype, property)\n]);\n\n// The return value is a mixin of `childProcess` and `Promise`\nconst mergePromise = (spawned, promise) => {\n\tfor (const [property, descriptor] of descriptors) {\n\t\t// Starting the main `promise` is deferred to avoid consuming streams\n\t\tconst value = typeof promise === 'function' ?\n\t\t\t(...args) => Reflect.apply(descriptor.value, promise(), args) :\n\t\t\tdescriptor.value.bind(promise);\n\n\t\tReflect.defineProperty(spawned, property, {...descriptor, value});\n\t}\n\n\treturn spawned;\n};\n\n// Use promises instead of `child_process` events\nconst getSpawnedPromise = spawned => {\n\treturn new Promise((resolve, reject) => {\n\t\tspawned.on('exit', (exitCode, signal) => {\n\t\t\tresolve({exitCode, signal});\n\t\t});\n\n\t\tspawned.on('error', error => {\n\t\t\treject(error);\n\t\t});\n\n\t\tif (spawned.stdin) {\n\t\t\tspawned.stdin.on('error', error => {\n\t\t\t\treject(error);\n\t\t\t});\n\t\t}\n\t});\n};\n\nmodule.exports = {\n\tmergePromise,\n\tgetSpawnedPromise\n};\n\n", "'use strict';\nconst normalizeArgs = (file, args = []) => {\n\tif (!Array.isArray(args)) {\n\t\treturn [file];\n\t}\n\n\treturn [file, ...args];\n};\n\nconst NO_ESCAPE_REGEXP = /^[\\w.-]+$/;\nconst DOUBLE_QUOTES_REGEXP = /\"/g;\n\nconst escapeArg = arg => {\n\tif (typeof arg !== 'string' || NO_ESCAPE_REGEXP.test(arg)) {\n\t\treturn arg;\n\t}\n\n\treturn `\"${arg.replace(DOUBLE_QUOTES_REGEXP, '\\\\\"')}\"`;\n};\n\nconst joinCommand = (file, args) => {\n\treturn normalizeArgs(file, args).join(' ');\n};\n\nconst getEscapedCommand = (file, args) => {\n\treturn normalizeArgs(file, args).map(arg => escapeArg(arg)).join(' ');\n};\n\nconst SPACES_REGEXP = / +/g;\n\n// Handle `execa.command()`\nconst parseCommand = command => {\n\tconst tokens = [];\n\tfor (const token of command.trim().split(SPACES_REGEXP)) {\n\t\t// Allow spaces to be escaped by a backslash if not meant as a delimiter\n\t\tconst previousToken = tokens[tokens.length - 1];\n\t\tif (previousToken && previousToken.endsWith('\\\\')) {\n\t\t\t// Merge previous token with current one\n\t\t\ttokens[tokens.length - 1] = `${previousToken.slice(0, -1)} ${token}`;\n\t\t} else {\n\t\t\ttokens.push(token);\n\t\t}\n\t}\n\n\treturn tokens;\n};\n\nmodule.exports = {\n\tjoinCommand,\n\tgetEscapedCommand,\n\tparseCommand\n};\n", "'use strict';\nconst path = require('path');\nconst childProcess = require('child_process');\nconst crossSpawn = require('cross-spawn');\nconst stripFinalNewline = require('strip-final-newline');\nconst npmRunPath = require('npm-run-path');\nconst onetime = require('onetime');\nconst makeError = require('./lib/error');\nconst normalizeStdio = require('./lib/stdio');\nconst {spawnedKill, spawnedCancel, setupTimeout, validateTimeout, setExitHandler} = require('./lib/kill');\nconst {handleInput, getSpawnedResult, makeAllStream, validateInputSync} = require('./lib/stream');\nconst {mergePromise, getSpawnedPromise} = require('./lib/promise');\nconst {joinCommand, parseCommand, getEscapedCommand} = require('./lib/command');\n\nconst DEFAULT_MAX_BUFFER = 1000 * 1000 * 100;\n\nconst getEnv = ({env: envOption, extendEnv, preferLocal, localDir, execPath}) => {\n\tconst env = extendEnv ? {...process.env, ...envOption} : envOption;\n\n\tif (preferLocal) {\n\t\treturn npmRunPath.env({env, cwd: localDir, execPath});\n\t}\n\n\treturn env;\n};\n\nconst handleArguments = (file, args, options = {}) => {\n\tconst parsed = crossSpawn._parse(file, args, options);\n\tfile = parsed.command;\n\targs = parsed.args;\n\toptions = parsed.options;\n\n\toptions = {\n\t\tmaxBuffer: DEFAULT_MAX_BUFFER,\n\t\tbuffer: true,\n\t\tstripFinalNewline: true,\n\t\textendEnv: true,\n\t\tpreferLocal: false,\n\t\tlocalDir: options.cwd || process.cwd(),\n\t\texecPath: process.execPath,\n\t\tencoding: 'utf8',\n\t\treject: true,\n\t\tcleanup: true,\n\t\tall: false,\n\t\twindowsHide: true,\n\t\t...options\n\t};\n\n\toptions.env = getEnv(options);\n\n\toptions.stdio = normalizeStdio(options);\n\n\tif (process.platform === 'win32' && path.basename(file, '.exe') === 'cmd') {\n\t\t// #116\n\t\targs.unshift('/q');\n\t}\n\n\treturn {file, args, options, parsed};\n};\n\nconst handleOutput = (options, value, error) => {\n\tif (typeof value !== 'string' && !Buffer.isBuffer(value)) {\n\t\t// When `execa.sync()` errors, we normalize it to '' to mimic `execa()`\n\t\treturn error === undefined ? undefined : '';\n\t}\n\n\tif (options.stripFinalNewline) {\n\t\treturn stripFinalNewline(value);\n\t}\n\n\treturn value;\n};\n\nconst execa = (file, args, options) => {\n\tconst parsed = handleArguments(file, args, options);\n\tconst command = joinCommand(file, args);\n\tconst escapedCommand = getEscapedCommand(file, args);\n\n\tvalidateTimeout(parsed.options);\n\n\tlet spawned;\n\ttry {\n\t\tspawned = childProcess.spawn(parsed.file, parsed.args, parsed.options);\n\t} catch (error) {\n\t\t// Ensure the returned error is always both a promise and a child process\n\t\tconst dummySpawned = new childProcess.ChildProcess();\n\t\tconst errorPromise = Promise.reject(makeError({\n\t\t\terror,\n\t\t\tstdout: '',\n\t\t\tstderr: '',\n\t\t\tall: '',\n\t\t\tcommand,\n\t\t\tescapedCommand,\n\t\t\tparsed,\n\t\t\ttimedOut: false,\n\t\t\tisCanceled: false,\n\t\t\tkilled: false\n\t\t}));\n\t\treturn mergePromise(dummySpawned, errorPromise);\n\t}\n\n\tconst spawnedPromise = getSpawnedPromise(spawned);\n\tconst timedPromise = setupTimeout(spawned, parsed.options, spawnedPromise);\n\tconst processDone = setExitHandler(spawned, parsed.options, timedPromise);\n\n\tconst context = {isCanceled: false};\n\n\tspawned.kill = spawnedKill.bind(null, spawned.kill.bind(spawned));\n\tspawned.cancel = spawnedCancel.bind(null, spawned, context);\n\n\tconst handlePromise = async () => {\n\t\tconst [{error, exitCode, signal, timedOut}, stdoutResult, stderrResult, allResult] = await getSpawnedResult(spawned, parsed.options, processDone);\n\t\tconst stdout = handleOutput(parsed.options, stdoutResult);\n\t\tconst stderr = handleOutput(parsed.options, stderrResult);\n\t\tconst all = handleOutput(parsed.options, allResult);\n\n\t\tif (error || exitCode !== 0 || signal !== null) {\n\t\t\tconst returnedError = makeError({\n\t\t\t\terror,\n\t\t\t\texitCode,\n\t\t\t\tsignal,\n\t\t\t\tstdout,\n\t\t\t\tstderr,\n\t\t\t\tall,\n\t\t\t\tcommand,\n\t\t\t\tescapedCommand,\n\t\t\t\tparsed,\n\t\t\t\ttimedOut,\n\t\t\t\tisCanceled: context.isCanceled,\n\t\t\t\tkilled: spawned.killed\n\t\t\t});\n\n\t\t\tif (!parsed.options.reject) {\n\t\t\t\treturn returnedError;\n\t\t\t}\n\n\t\t\tthrow returnedError;\n\t\t}\n\n\t\treturn {\n\t\t\tcommand,\n\t\t\tescapedCommand,\n\t\t\texitCode: 0,\n\t\t\tstdout,\n\t\t\tstderr,\n\t\t\tall,\n\t\t\tfailed: false,\n\t\t\ttimedOut: false,\n\t\t\tisCanceled: false,\n\t\t\tkilled: false\n\t\t};\n\t};\n\n\tconst handlePromiseOnce = onetime(handlePromise);\n\n\thandleInput(spawned, parsed.options.input);\n\n\tspawned.all = makeAllStream(spawned, parsed.options);\n\n\treturn mergePromise(spawned, handlePromiseOnce);\n};\n\nmodule.exports = execa;\n\nmodule.exports.sync = (file, args, options) => {\n\tconst parsed = handleArguments(file, args, options);\n\tconst command = joinCommand(file, args);\n\tconst escapedCommand = getEscapedCommand(file, args);\n\n\tvalidateInputSync(parsed.options);\n\n\tlet result;\n\ttry {\n\t\tresult = childProcess.spawnSync(parsed.file, parsed.args, parsed.options);\n\t} catch (error) {\n\t\tthrow makeError({\n\t\t\terror,\n\t\t\tstdout: '',\n\t\t\tstderr: '',\n\t\t\tall: '',\n\t\t\tcommand,\n\t\t\tescapedCommand,\n\t\t\tparsed,\n\t\t\ttimedOut: false,\n\t\t\tisCanceled: false,\n\t\t\tkilled: false\n\t\t});\n\t}\n\n\tconst stdout = handleOutput(parsed.options, result.stdout, result.error);\n\tconst stderr = handleOutput(parsed.options, result.stderr, result.error);\n\n\tif (result.error || result.status !== 0 || result.signal !== null) {\n\t\tconst error = makeError({\n\t\t\tstdout,\n\t\t\tstderr,\n\t\t\terror: result.error,\n\t\t\tsignal: result.signal,\n\t\t\texitCode: result.status,\n\t\t\tcommand,\n\t\t\tescapedCommand,\n\t\t\tparsed,\n\t\t\ttimedOut: result.error && result.error.code === 'ETIMEDOUT',\n\t\t\tisCanceled: false,\n\t\t\tkilled: result.signal !== null\n\t\t});\n\n\t\tif (!parsed.options.reject) {\n\t\t\treturn error;\n\t\t}\n\n\t\tthrow error;\n\t}\n\n\treturn {\n\t\tcommand,\n\t\tescapedCommand,\n\t\texitCode: 0,\n\t\tstdout,\n\t\tstderr,\n\t\tfailed: false,\n\t\ttimedOut: false,\n\t\tisCanceled: false,\n\t\tkilled: false\n\t};\n};\n\nmodule.exports.command = (command, options) => {\n\tconst [file, ...args] = parseCommand(command);\n\treturn execa(file, args, options);\n};\n\nmodule.exports.commandSync = (command, options) => {\n\tconst [file, ...args] = parseCommand(command);\n\treturn execa.sync(file, args, options);\n};\n\nmodule.exports.node = (scriptPath, args, options = {}) => {\n\tif (args && !Array.isArray(args) && typeof args === 'object') {\n\t\toptions = args;\n\t\targs = [];\n\t}\n\n\tconst stdio = normalizeStdio.node(options);\n\tconst defaultExecArgv = process.execArgv.filter(arg => !arg.startsWith('--inspect'));\n\n\tconst {\n\t\tnodePath = process.execPath,\n\t\tnodeOptions = defaultExecArgv\n\t} = options;\n\n\treturn execa(\n\t\tnodePath,\n\t\t[\n\t\t\t...nodeOptions,\n\t\t\tscriptPath,\n\t\t\t...(Array.isArray(args) ? args : [])\n\t\t],\n\t\t{\n\t\t\t...options,\n\t\t\tstdin: undefined,\n\t\t\tstdout: undefined,\n\t\t\tstderr: undefined,\n\t\t\tstdio,\n\t\t\tshell: false\n\t\t}\n\t);\n};\n", "/**\n * @file create-image.tsx\n *\n * @summary Raycast command to create images with various patterns and dimensions.\n * @author Stephen Kaplan <skaplanofficial@gmail.com>\n *\n * Created at     : 2023-07-06 14:53:50\n * Last modified  : 2023-07-06 16:48:08\n */\n\nimport { Color, Grid } from \"@raycast/api\";\n\nimport { standardDimensions } from \"./utilities/generators\";\nimport SizeSelectionActionPanel from \"./components/SizeSelectionActionPanel\";\n\nexport default function Command() {\n  const squareOptions = standardDimensions.map((width) =>\n    standardDimensions\n      .filter((height) => width == height)\n      .map((height) => {\n        return (\n          <Grid.Item\n            title={`${width}x${height}`}\n            key={`${width}x${height}`}\n            content={{ source: `thumbnails/${width}x${height}.webp` }}\n            actions={<SizeSelectionActionPanel width={width} height={height} />}\n          />\n        );\n      })\n  );\n\n  const wideOptions = standardDimensions.map((width) =>\n    standardDimensions\n      .filter((height) => width / height > 4 / 3 && width / height < 15 / 3)\n      .map((height) => {\n        return (\n          <Grid.Item\n            title={`${width}x${height}`}\n            key={`${width}x${height}`}\n            content={{ source: `thumbnails/${width}x${height}.webp`, tintColor: Color.Red }}\n            actions={<SizeSelectionActionPanel width={width} height={height} />}\n          />\n        );\n      })\n  );\n\n  const tallOptions = standardDimensions.map((width) =>\n    standardDimensions\n      .filter((height) => height / width > 4 / 3 && height / width < 15 / 3)\n      .map((height) => {\n        return (\n          <Grid.Item\n            title={`${width}x${height}`}\n            key={`${width}x${height}`}\n            content={{ source: `thumbnails/${width}x${height}.webp`, tintColor: Color.Green }}\n            actions={<SizeSelectionActionPanel width={width} height={height} />}\n          />\n        );\n      })\n  );\n\n  const extremeOptions = standardDimensions.map((width) =>\n    standardDimensions\n      .filter((height) => height / width > 15 / 3 || width / height > 15 / 3)\n      .map((height) => {\n        return (\n          <Grid.Item\n            title={`${width}x${height}`}\n            key={`${width}x${height}`}\n            content={{ source: `thumbnails/${width}x${height}.webp`, tintColor: Color.Blue }}\n            actions={<SizeSelectionActionPanel width={width} height={height} />}\n          />\n        );\n      })\n  );\n\n  return (\n    <Grid\n      navigationTitle=\"Image Size Options\"\n      searchBarPlaceholder=\"Search image sizes...\"\n      inset={Grid.Inset.Small}\n      isLoading={false}\n    >\n      <Grid.Section title=\"Square\">{squareOptions}</Grid.Section>\n      <Grid.Section title=\"Wide\">{wideOptions}</Grid.Section>\n      <Grid.Section title=\"Tall\">{tallOptions}</Grid.Section>\n      <Grid.Section title=\"Extreme\">{extremeOptions}</Grid.Section>\n    </Grid>\n  );\n}\n", "import process from 'node:process';\nimport execa from 'execa';\n\nexport async function runAppleScript(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst {stdout} = await execa('osascript', ['-e', script, outputArguments]);\n\treturn stdout;\n}\n\nexport function runAppleScriptSync(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst {stdout} = execa.sync('osascript', ['-e', script, ...outputArguments]);\n\treturn stdout;\n}\n", "/**\n * @file utilities/generators.ts\n *\n * @summary Image generators and associated utilities.\n * @author Stephen Kaplan <skaplanofficial@gmail.com>\n *\n * Created at     : 2023-07-06 11:54:14\n * Last modified  : 2023-07-06 16:47:11\n */\n\nimport { runAppleScript } from \"run-applescript\";\n\nimport { Generator, GeneratorKey } from \"./types\";\n\n/**\n * Common single dimension values for images. These are permuted to generate the available image sizes.\n */\nexport const standardDimensions = [1024, 512, 256, 128, 100, 64, 50, 32];\n\n/**\n * Generates a placeholder image of the specified dimensions. The image is a solid gray color.\n *\n * @param width The width of the image.\n * @param height The height of the image.\n * @param destination The destination path for the image.\n * @returns A promise that resolves when the image has been generated and saved. If no destination is specified, the promise resolves with the data URL of the generated image.\n */\nexport const generatePlaceholder = async (width: number, height: number, destination?: string) => {\n  return runAppleScript(`use framework \"Foundation\"\n        use framework \"Quartz\"\n        \n        set theCIImage to current application's CIImage's imageWithColor:(current application's CIColor's grayColor())\n        set theBounds to current application's NSMakeRect(0, 0, ${width}, ${height})\n        set croppedOutput to theCIImage's imageByCroppingToRect:theBounds\n        \n        -- Convert back to NSImage and save to file\n        set theRep to current application's NSCIImageRep's imageRepWithCIImage:croppedOutput\n        set theResult to current application's NSImage's alloc()'s initWithSize:(theRep's |size|())\n        theResult's addRepresentation:theRep\n        ${\n          destination == undefined\n            ? `set theTIFFData to theResult's TIFFRepresentation()\n              set theBitmapImageRep to current application's NSBitmapImageRep's imageRepWithData:theTIFFData\n              set theResultData to theBitmapImageRep's representationUsingType:(current application's NSPNGFileType) |properties|:(missing value)\n              set theBase64String to theResultData's base64EncodedStringWithOptions:0\n              return \"data:image/png;base64,\" & theBase64String`\n            : `saveImage(theResult, \"${destination}\")\n        \n        on saveImage(imageToSave, destinationPath)\n            -- Saves an NSImage to the supplied file path\n            set theTIFFData to imageToSave's TIFFRepresentation()\n            set theBitmapImageRep to current application's NSBitmapImageRep's imageRepWithData:theTIFFData\n            set theResultData to theBitmapImageRep's representationUsingType:(current application's NSPNGFileType) |properties|:(missing value)\n            theResultData's writeToFile:destinationPath atomically:false\n        end saveImage`\n        }`);\n};\n\n/**\n * Generates a data URL of a preview image for the specified CIFilter.\n *\n * @param CIFilterName The name of the CIFilter to generate a preview for.\n * @param inputs The input key/value pairs for the CIFilter.\n * @returns A promise that resolves with the data URL of the generated preview.\n */\nexport const generatePreview = async (CIFilterName: string, inputs: { [key: string]: unknown }) => {\n  return runAppleScript(`use framework \"Foundation\"\n      use framework \"Quartz\"\n      use scripting additions\n      \n      set filterName to \"${CIFilterName}\"\n      set theFilter to current application's CIFilter's filterWithName:filterName\n      theFilter's setDefaults()\n\n      set imgWidth to 256\n      set imgHeight to 256\n  \n      set theCIImage to current application's CIImage's emptyImage()\n      ${Object.entries(inputs)\n        .map(([key, value]) => `theFilter's setValue:(${value}) forKey:\"${key}\"`)\n        .join(\"\\n\")}\n      \n      set theBounds to current application's NSMakeRect(0, 0, imgWidth, imgHeight)\n      set uncroppedOutput to theFilter's valueForKey:(current application's kCIOutputImageKey)\n      set croppedOutput to uncroppedOutput's imageByCroppingToRect:theBounds\n      \n      -- Convert back to NSImage and save to file\n      set theRep to current application's NSCIImageRep's imageRepWithCIImage:croppedOutput\n      set theResult to current application's NSImage's alloc()'s initWithSize:(theRep's |size|())\n      theResult's addRepresentation:theRep\n\n      -- Saves an NSImage to the supplied file path\n      set theTIFFData to theResult's TIFFRepresentation()\n      set theBitmapImageRep to current application's NSBitmapImageRep's imageRepWithData:theTIFFData\n      set theResultData to theBitmapImageRep's representationUsingType:(current application's NSPNGFileType) |properties|:(missing value)\n      set theBase64String to (theResultData's base64EncodedStringWithOptions:0) as text\n      return \"data:image/png;base64,\" & theBase64String\n  `);\n};\n\n/**\n * Generates a full-size render of the specified CIFilter.\n *\n * @param destination The destination path for the generated image.\n * @param CIFilterName The name of the CIFilter to generate a preview for.\n * @param width The width of the generated image.\n * @param height The height of the generated image.\n * @param inputs The input key/value pairs for the CIFilter.\n * @returns A promise that resolves when the image has been generated and saved.\n */\nexport const generate = async (\n  destination: string,\n  CIFilterName: string,\n  width: number,\n  height: number,\n  inputs: { [key: string]: unknown }\n) => {\n  return runAppleScript(`use framework \"Foundation\"\n    use framework \"Quartz\"\n    use scripting additions\n    \n    set filterName to \"${CIFilterName}\"\n    set theFilter to current application's CIFilter's filterWithName:filterName\n    theFilter's setDefaults()\n\n    set imgWidth to ${width}\n    set imgHeight to ${height}\n\n    set theCIImage to current application's CIImage's emptyImage()\n    ${Object.entries(inputs)\n      .map(([key, value]) => `theFilter's setValue:(${value}) forKey:\"${key}\"`)\n      .join(\"\\n\")}\n    \n    set theBounds to current application's NSMakeRect(0, 0, imgWidth, imgHeight)\n    set uncroppedOutput to theFilter's valueForKey:(current application's kCIOutputImageKey)\n    set croppedOutput to uncroppedOutput's imageByCroppingToRect:theBounds\n    \n    -- Convert back to NSImage and save to file\n    set theRep to current application's NSCIImageRep's imageRepWithCIImage:croppedOutput\n    set theResult to current application's NSImage's alloc()'s initWithSize:(theRep's |size|())\n    theResult's addRepresentation:theRep\n    saveImage(theResult, \"${destination}\")\n    \n    on saveImage(imageToSave, destinationPath)\n        -- Saves an NSImage to the supplied file path\n        set theTIFFData to imageToSave's TIFFRepresentation()\n        set theBitmapImageRep to current application's NSBitmapImageRep's imageRepWithData:theTIFFData\n        set theResultData to theBitmapImageRep's representationUsingType:(current application's NSPNGFileType) |properties|:(missing value)\n        theResultData's writeToFile:destinationPath atomically:false\n    end saveImage`);\n};\n\n/**\n * All available generators.\n */\nexport const generators: { [key in GeneratorKey]: Generator } = {\n  Checkerboard: {\n    applyMethod: generate,\n    CIFilterName: \"CICheckerboardGenerator\",\n    name: \"Checkerboard\",\n    thumbnail: \"thumbnails/checkerboard.webp\",\n  },\n  ConstantColor: {\n    applyMethod: generate,\n    CIFilterName: \"CIConstantColorGenerator\",\n    name: \"Constant Color\",\n    thumbnail: \"thumbnails/constant_color.webp\",\n  },\n  LenticularHalo: {\n    applyMethod: generate,\n    CIFilterName: \"CILenticularHaloGenerator\",\n    name: \"Lenticular Halo\",\n    thumbnail: \"thumbnails/lenticular_halo.webp\",\n  },\n  LinearGradient: {\n    applyMethod: generate,\n    CIFilterName: \"CILinearGradient\",\n    name: \"Linear Gradient\",\n    thumbnail: \"thumbnails/linear_gradient.webp\",\n  },\n  RadialGradient: {\n    applyMethod: generate,\n    CIFilterName: \"CIRadialGradient\",\n    name: \"Radial Gradient\",\n    thumbnail: \"thumbnails/radial_gradient.webp\",\n  },\n  Random: {\n    applyMethod: generate,\n    CIFilterName: \"CIRandomGenerator\",\n    name: \"Random\",\n    thumbnail: \"thumbnails/random.webp\",\n  },\n  StarShine: {\n    applyMethod: generate,\n    CIFilterName: \"CIStarShineGenerator\",\n    name: \"Star Shine\",\n    thumbnail: \"thumbnails/star_shine.webp\",\n  },\n  Stripes: {\n    applyMethod: generate,\n    CIFilterName: \"CIStripesGenerator\",\n    name: \"Stripes\",\n    thumbnail: \"thumbnails/stripes.webp\",\n  },\n  Sunbeams: {\n    applyMethod: generate,\n    CIFilterName: \"CISunbeamsGenerator\",\n    name: \"Sunbeams\",\n    thumbnail: \"thumbnails/sunbeams.webp\",\n  },\n};\n\n// The rest of this file is made up of helper functions for generating CIFilter inputs.\n\nexport const getCheckerboardOptions = (\n  redValues: number[],\n  greenValues: number[],\n  blueValues: number[],\n  alphaValues: number[]\n) => [\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[0] / 255} green:${\n      greenValues[0] / 255\n    } blue:${blueValues[0] / 255} alpha:${alphaValues[0] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[1] / 255} green:${\n      greenValues[1] / 255\n    } blue:${blueValues[1] / 255} alpha:${alphaValues[1] / 255}`,\n    inputWidth: \"imgWidth / 4\",\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[2] / 255} green:${\n      greenValues[2] / 255\n    } blue:${blueValues[2] / 255} alpha:${alphaValues[2] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[3] / 255} green:${\n      greenValues[3] / 255\n    } blue:${blueValues[3] / 255} alpha:${alphaValues[3] / 255}`,\n    inputWidth: \"imgWidth / 8\",\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[4] / 255} green:${\n      greenValues[4] / 255\n    } blue:${blueValues[4] / 255} alpha:${alphaValues[4] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[5] / 255} green:${\n      greenValues[5] / 255\n    } blue:${blueValues[5] / 255} alpha:${alphaValues[5] / 255}`,\n    inputWidth: \"imgWidth / 16\",\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[6] / 255} green:${\n      greenValues[6] / 255\n    } blue:${blueValues[6] / 255} alpha:${alphaValues[6] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[7] / 255} green:${\n      greenValues[7] / 255\n    } blue:${blueValues[7] / 255} alpha:${alphaValues[7] / 255}`,\n    inputWidth: \"imgWidth / 32\",\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[8] / 255} green:${\n      greenValues[8] / 255\n    } blue:${blueValues[8] / 255} alpha:${alphaValues[8] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[9] / 255} green:${\n      greenValues[9] / 255\n    } blue:${blueValues[9] / 255} alpha:${alphaValues[9] / 255}`,\n    inputWidth: \"imgWidth / 64\",\n  },\n];\n\nexport const getStripeOptions = (\n  redValues: number[],\n  greenValues: number[],\n  blueValues: number[],\n  alphaValues: number[]\n) => [\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[0] / 255} green:${\n      greenValues[0] / 255\n    } blue:${blueValues[0] / 255} alpha:${alphaValues[0] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[1] / 255} green:${\n      greenValues[1] / 255\n    } blue:${blueValues[1] / 255} alpha:${alphaValues[1] / 255}`,\n    inputWidth: \"imgWidth / 4\",\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[2] / 255} green:${\n      greenValues[2] / 255\n    } blue:${blueValues[2] / 255} alpha:${alphaValues[2] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[3] / 255} green:${\n      greenValues[3] / 255\n    } blue:${blueValues[3] / 255} alpha:${alphaValues[3] / 255}`,\n    inputWidth: \"imgWidth / 8\",\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[4] / 255} green:${\n      greenValues[4] / 255\n    } blue:${blueValues[4] / 255} alpha:${alphaValues[4] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[5] / 255} green:${\n      greenValues[5] / 255\n    } blue:${blueValues[5] / 255} alpha:${alphaValues[5] / 255}`,\n    inputWidth: \"imgWidth / 16\",\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[6] / 255} green:${\n      greenValues[6] / 255\n    } blue:${blueValues[6] / 255} alpha:${alphaValues[6] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[7] / 255} green:${\n      greenValues[7] / 255\n    } blue:${blueValues[7] / 255} alpha:${alphaValues[7] / 255}`,\n    inputWidth: \"imgWidth / 32\",\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[8] / 255} green:${\n      greenValues[8] / 255\n    } blue:${blueValues[8] / 255} alpha:${alphaValues[8] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[9] / 255} green:${\n      greenValues[9] / 255\n    } blue:${blueValues[9] / 255} alpha:${alphaValues[9] / 255}`,\n    inputWidth: \"imgWidth / 64\",\n  },\n];\n\nexport const getSolidColorOptions = (redValues: number[], greenValues: number[], blueValues: number[]) =>\n  Array(10)\n    .fill(0)\n    .map((_, i) => ({\n      inputColor: `current application's CIColor's colorWithRed:${redValues[i] / 255} green:${\n        greenValues[i] / 255\n      } blue:${blueValues[i] / 255} alpha:1.0`,\n    }));\n\nexport const getLinearGradientOptions = (\n  redValues: number[],\n  greenValues: number[],\n  blueValues: number[],\n  alphaValues: number[]\n) => [\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[0] / 255} green:${\n      greenValues[0] / 255\n    } blue:${blueValues[0] / 255} alpha:${alphaValues[0] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[1] / 255} green:${\n      greenValues[1] / 255\n    } blue:${blueValues[1] / 255} alpha:${alphaValues[1] / 255}`,\n    inputPoint0: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n    inputPoint1: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[2] / 255} green:${\n      greenValues[2] / 255\n    } blue:${blueValues[2] / 255} alpha:${alphaValues[2] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[3] / 255} green:${\n      greenValues[3] / 255\n    } blue:${blueValues[3] / 255} alpha:${alphaValues[3] / 255}`,\n    inputPoint0: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n    inputPoint1: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[4] / 255} green:${\n      greenValues[4] / 255\n    } blue:${blueValues[4] / 255} alpha:${alphaValues[4] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[5] / 255} green:${\n      greenValues[5] / 255\n    } blue:${blueValues[5] / 255} alpha:${alphaValues[5] / 255}`,\n    inputPoint0: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n    inputPoint1: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[6] / 255} green:${\n      greenValues[6] / 255\n    } blue:${blueValues[6] / 255} alpha:${alphaValues[6] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[7] / 255} green:${\n      greenValues[7] / 255\n    } blue:${blueValues[7] / 255} alpha:${alphaValues[7] / 255}`,\n    inputPoint0: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n    inputPoint1: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[8] / 255} green:${\n      greenValues[8] / 255\n    } blue:${blueValues[8] / 255} alpha:${alphaValues[8] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[9] / 255} green:${\n      greenValues[9] / 255\n    } blue:${blueValues[9] / 255} alpha:${alphaValues[9] / 255}`,\n    inputPoint0: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n    inputPoint1: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n  },\n];\n\nexport const getRadialGradientOptions = (\n  redValues: number[],\n  greenValues: number[],\n  blueValues: number[],\n  alphaValues: number[]\n) => [\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[0] / 255} green:${\n      greenValues[0] / 255\n    } blue:${blueValues[0] / 255} alpha:${alphaValues[0] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[1] / 255} green:${\n      greenValues[1] / 255\n    } blue:${blueValues[1] / 255} alpha:${alphaValues[1] / 255}`,\n    inputCenter: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n    inputRadius0: `((random number) * imgWidth)`,\n    inputRadius1: `((random number) * imgWidth)`,\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[2] / 255} green:${\n      greenValues[2] / 255\n    } blue:${blueValues[2] / 255} alpha:${alphaValues[2] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[3] / 255} green:${\n      greenValues[3] / 255\n    } blue:${blueValues[3] / 255} alpha:${alphaValues[3] / 255}`,\n    inputCenter: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n    inputRadius0: `((random number) * imgWidth)`,\n    inputRadius1: `((random number) * imgWidth)`,\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[4] / 255} green:${\n      greenValues[4] / 255\n    } blue:${blueValues[4] / 255} alpha:${alphaValues[4] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[5] / 255} green:${\n      greenValues[5] / 255\n    } blue:${blueValues[5] / 255} alpha:${alphaValues[5] / 255}`,\n    inputCenter: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n    inputRadius0: `((random number) * imgWidth)`,\n    inputRadius1: `((random number) * imgWidth)`,\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[6] / 255} green:${\n      greenValues[6] / 255\n    } blue:${blueValues[6] / 255} alpha:${alphaValues[6] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[7] / 255} green:${\n      greenValues[7] / 255\n    } blue:${blueValues[7] / 255} alpha:${alphaValues[7] / 255}`,\n    inputCenter: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n    inputRadius0: `((random number) * imgWidth)`,\n    inputRadius1: `((random number) * imgWidth)`,\n  },\n  {\n    inputColor0: `current application's CIColor's colorWithRed:${redValues[8] / 255} green:${\n      greenValues[8] / 255\n    } blue:${blueValues[8] / 255} alpha:${alphaValues[8] / 255}`,\n    inputColor1: `current application's CIColor's colorWithRed:${redValues[9] / 255} green:${\n      greenValues[9] / 255\n    } blue:${blueValues[9] / 255} alpha:${alphaValues[9] / 255}`,\n    inputCenter: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n    inputRadius0: `((random number) * imgWidth)`,\n    inputRadius1: `((random number) * imgWidth)`,\n  },\n];\n\nexport const getStarShineOptions = (\n  redValues: number[],\n  greenValues: number[],\n  blueValues: number[],\n  alphaValues: number[]\n) => ({\n  inputColor: `current application's CIColor's colorWithRed:${redValues[0] / 255} green:${greenValues[0] / 255} blue:${\n    blueValues[0] / 255\n  } alpha:${alphaValues[0] / 255}`,\n  inputCrossScale: `((random number) * 10)`,\n  inputCrossAngle: `((random number) * 90)`,\n  inputCrossOpacity: `((random number) * 9) - 8`,\n  inputCrossWidth: `((random number) * imgWidth / 5)`,\n  inputEpsilon: `((random number) * 1)`,\n  inputRadius: `((random number) * imgWidth / 10)`,\n  inputCenter: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n});\n\nexport const getLenticularHaloOptions = (\n  redValues: number[],\n  greenValues: number[],\n  blueValues: number[],\n  alphaValues: number[]\n) => ({\n  inputColor: `current application's CIColor's colorWithRed:${redValues[0] / 255} green:${greenValues[0] / 255} blue:${\n    blueValues[0] / 255\n  } alpha:${alphaValues[0] / 255}`,\n  inputHaloRadius: `((random number) * imgWidth / 10)`,\n  inputHaloWidth: `((random number) * imgWidth / 10)`,\n  inputStriationStrength: `((random number) * 1)`,\n  inputStriationContrast: `((random number) * 5)`,\n  inputTime: `((random number) * 10)`,\n  inputCenter: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n  inputHaloOverlap: `((random number) * 0.99)`,\n});\n\nexport const getSunbeamsOptions = (\n  redValues: number[],\n  greenValues: number[],\n  blueValues: number[],\n  alphaValues: number[]\n) => ({\n  inputColor: `current application's CIColor's colorWithRed:${redValues[0] / 255} green:${greenValues[0] / 255} blue:${\n    blueValues[0] / 255\n  } alpha:${alphaValues[0] / 255}`,\n  inputSunRadius: `((random number) * imgWidth / 10)`,\n  inputMaxStriationRadius: `((random number) * imgWidth / 10)`,\n  inputStriationStrength: `((random number) * 1)`,\n  inputStriationContrast: `((random number) * 5)`,\n  inputTime: `((random number) * 10)`,\n  inputCenter: `current application's CIVector's vectorWithX:((random number) * imgWidth) Y:((random number) * imgHeight)`,\n});\n", "/**\n * @file components/SizeSelectionActionPanel.tsx\n *\n * @summary Action panel for image size selection grid items.\n * @author Stephen Kaplan <skaplanofficial@gmail.com>\n *\n * Created at     : 2023-07-06 16:46:33\n * Last modified  : 2023-07-06 16:46:49\n */\n\nimport os from \"os\";\nimport path from \"path\";\n\nimport { Action, ActionPanel, Clipboard, Icon, showHUD, showToast, Toast } from \"@raycast/api\";\n\nimport { generatePlaceholder } from \"../utilities/generators\";\nimport { cleanup, getDestinationPaths, moveImageResultsToFinalDestination, showErrorToast } from \"../utilities/utils\";\nimport ImagePatternGrid from \"./ImagePatternGrid\";\n\n/**\n * Action panel for the image size selection grid.\n *\n * @param props.width The width of the generated image.\n * @param props.height The height of the generated image.\n * @returns An action panel component.\n */\nexport default function SizeSelectionActionPanel(props: { width: number; height: number }) {\n  const { width, height } = props;\n  return (\n    <ActionPanel>\n      <Action.Push\n        title={`Select Size ${width}x${height}`}\n        icon={Icon.Center}\n        target={<ImagePatternGrid width={width} height={height} />}\n      />\n      <Action\n        title={`Create ${width}x${height} Placeholder`}\n        icon={Icon.Image}\n        onAction={async () => {\n          const destinations = getDestinationPaths([path.join(os.tmpdir(), `${width}x${height}.png`)], true);\n          const toast = await showToast({ title: \"Creating Placeholder...\", style: Toast.Style.Animated });\n          try {\n            await generatePlaceholder(width, height, destinations[0]);\n            await moveImageResultsToFinalDestination(destinations);\n            toast.title = `Created Placeholder`;\n            toast.style = Toast.Style.Success;\n          } catch (error) {\n            await showErrorToast(`Failed To Create Placeholder`, error as Error, toast);\n          } finally {\n            cleanup();\n          }\n        }}\n      />\n      <ActionPanel.Section title=\"Clipboard Actions\">\n        <Action\n          title=\"Paste Placeholder In Active App\"\n          icon={Icon.Clipboard}\n          shortcut={{ modifiers: [\"cmd\", \"shift\"], key: \"v\" }}\n          onAction={async () => {\n            const dataURL = await generatePlaceholder(width, height);\n            await Clipboard.paste({ html: `<img src=\"${dataURL}\" />` });\n            await showHUD(\"Pasted Placeholder Image\");\n          }}\n        />\n        <Action\n          title=\"Copy Placeholder Image\"\n          icon={Icon.Clipboard}\n          shortcut={{ modifiers: [\"cmd\", \"shift\"], key: \"c\" }}\n          onAction={async () => {\n            const dataURL = await generatePlaceholder(width, height);\n            await Clipboard.copy({ html: `<img src=\"${dataURL}\" />` });\n            await showHUD(\"Copied Placeholder Image\");\n          }}\n        />\n        <Action\n          title=\"Copy Placeholder Data URL\"\n          icon={Icon.Clipboard}\n          shortcut={{ modifiers: [\"cmd\", \"shift\"], key: \"u\" }}\n          onAction={async () => {\n            const dataURL = await generatePlaceholder(width, height);\n            await Clipboard.copy(dataURL);\n            await showHUD(\"Copied Placeholder Data URL\");\n          }}\n        />\n      </ActionPanel.Section>\n    </ActionPanel>\n  );\n}\n", "/**\n * @file utilities/utils.ts\n *\n * @summary Helper functions used throughout the extension.\n * @author Stephen Kaplan <skaplanofficial@gmail.com>\n *\n * Created at     : 2023-07-06 14:48:00\n * Last modified  : 2024-01-27 13:31:10\n */\n\nimport { execSync } from \"child_process\";\nimport * as fs from \"fs\";\nimport * as os from \"os\";\nimport path from \"path\";\nimport { runAppleScript, runAppleScriptSync } from \"run-applescript\";\n\nimport {\n  Clipboard,\n  environment,\n  getFrontmostApplication,\n  getPreferenceValues,\n  LocalStorage,\n  showToast,\n  Toast,\n} from \"@raycast/api\";\n\nimport { Direction, ImageResultHandling } from \"./enums\";\nimport { copyImagesAtPathsToClipboard, getClipboardImages } from \"./clipboard\";\nimport { ExtensionPreferences } from \"./preferences\";\n\n/**\n * Gets currently selected images in Finder.\n *\n * @returns A promise resolving to the comma-separated list of images as a string.\n */\nconst getSelectedFinderImages = async (): Promise<string> => {\n  return runAppleScript(\n    `set imageTypes to {\"PNG\", \"JPG\", \"JPEG\", \"TIF\", \"HEIF\", \"GIF\", \"ICO\", \"ICNS\", \"ASTC\", \"BMP\", \"DDS\", \"EXR\", \"JP2\", \"KTX\", \"Portable Bitmap\", \"Adobe Photoshop\", \"PVR\", \"TGA\", \"WebP\", \"SVG\", \"PDF\", \"HEIC\"}\n    \n    tell application \"Finder\"\n      set theSelection to selection\n\n      if theSelection is {} and (count Finder windows) > 0 then\n        repeat with i from 1 to (count Finder windows)\n          activate window i\n          set theSelection to selection\n\n          set selectionKinds to {}\n          repeat with j from 1 to (count theSelection)\n            set selectionKinds to selectionKinds & kind of (item j of theSelection)\n          end repeat\n\n          set containsImage to false\n          repeat with imageType in imageTypes\n            if selectionKinds contains imageType then\n              set containsImage to true\n              exit repeat\n            end if\n          end repeat\n        end repeat\n      end if\n\n      if theSelection is {} then\n        return\n      else if (theSelection count) is equal to 1 then\n        repeat with imageType in imageTypes\n          if (kind of the first item of theSelection) contains imageType then\n            return the POSIX path of (theSelection as alias)\n            exit repeat\n          end if\n        end repeat\n      else\n        set thePaths to {}\n        repeat with i from 1 to (theSelection count)\n          repeat with imageType in imageTypes\n            if (kind of (item i of theSelection)) contains imageType then\n              copy (POSIX path of (item i of theSelection as alias)) to end of thePaths\n              exit repeat\n            end if\n          end repeat\n        end repeat\n        return thePaths\n      end if\n    end tell`\n  );\n};\n\n/**\n * Gets currently selected images in Path Finder.\n *\n * @returns A promise resolving to the comma-separated list of images as a string.\n */\nconst getSelectedPathFinderImages = async (): Promise<string> => {\n  return runAppleScript(\n    `set imageTypes to {\"PNG\", \"JPG\", \"JPEG\", \"TIF\", \"HEIF\", \"GIF\", \"ICO\", \"ICNS\", \"ASTC\", \"BMP\", \"DDS\", \"EXR\", \"JP2\", \"KTX\", \"Portable Bitmap\", \"Adobe Photoshop\", \"PVR\", \"TGA\", \"WebP\", \"SVG\", \"PDF\", \"HEIC\"}\n\n    tell application \"Path Finder\"\n      set theSelection to selection\n\n      if theSelection is {} and (count windows) > 0 then\n        repeat with i from 1 to (count windows)\n          activate window i\n          set theSelection to selection\n\n          set selectionKinds to {}\n          repeat with j from 1 to (count theSelection)\n            set selectionKinds to selectionKinds & kind of (item j of theSelection)\n          end repeat\n\n          set containsImage to false\n          repeat with imageType in imageTypes\n            if selectionKinds contains imageType then\n              set containsImage to true\n              exit repeat\n            end if\n          end repeat\n        end repeat\n      end if\n\n      if theSelection is {} then\n        return\n      else if (theSelection count) is equal to 1 then\n        repeat with imageType in imageTypes\n          if (kind of the first item of theSelection) contains imageType then\n            return the POSIX path of first item of theSelection\n            exit repeat\n          end if\n        end repeat\n      else\n        set thePaths to {}\n        repeat with i from 1 to (theSelection count)\n          repeat with imageType in imageTypes\n            if (kind of (item i of theSelection)) contains imageType then\n              copy (POSIX path of (item i of theSelection)) to end of thePaths\n              exit repeat\n            end if\n          end repeat\n        end repeat\n        return thePaths\n      end if\n    end tell`\n  );\n};\n\n/**\n * Cleans up temporary files created by the extension.\n *\n * @returns A promise resolving when the cleanup is complete.\n */\nexport const cleanup = async () => {\n  const itemsToRemove = (await LocalStorage.getItem(\"itemsToRemove\")) ?? \"\";\n  const itemsToRemoveArray = itemsToRemove.toString().split(\", \");\n  for (const item of itemsToRemoveArray) {\n    if (fs.existsSync(item)) {\n      await fs.promises.rm(item);\n    }\n  }\n  await LocalStorage.removeItem(\"itemsToRemove\");\n};\n\n/**\n * Gets selected images in the preferred file manager application.\n *\n * @returns A promise resolving to the list of selected image paths.\n */\nexport const getSelectedImages = async (): Promise<string[]> => {\n  const selectedImages: string[] = [];\n\n  // Get name of preferred file manager\n  const extensionPreferences = getPreferenceValues<ExtensionPreferences>();\n  const inputMethod = extensionPreferences.inputMethod;\n  let inputMethodError = false;\n\n  if (inputMethod == \"Clipboard\") {\n    // Extract images from clipboard\n    try {\n      const clipboardImages = (await getClipboardImages()).split(\", \");\n      await LocalStorage.setItem(\"itemsToRemove\", clipboardImages.join(\", \"));\n      if (clipboardImages.filter((i) => i.trim().length > 0).length > 0) {\n        return clipboardImages;\n      }\n    } catch (error) {\n      // Error getting images from clipboard, fall back to Finder/Path Finder\n      console.error(\"Couldn't get images from clipboard\");\n      inputMethodError = true;\n    }\n  }\n\n  // Get name of frontmost application\n  let activeApp = inputMethod;\n  try {\n    activeApp = (await getFrontmostApplication()).name;\n  } catch {\n    console.error(\"Couldn't get frontmost application\");\n  }\n\n  // Attempt to get selected images from Path Finder\n  try {\n    if (inputMethod == \"Path Finder\") {\n      const pathFinderImages = (await getSelectedPathFinderImages()).split(\", \");\n      pathFinderImages.forEach((imgPath) => {\n        if (!selectedImages.includes(imgPath)) {\n          selectedImages.push(imgPath);\n        }\n      });\n      if (selectedImages.length > 0) {\n        return selectedImages;\n      }\n    }\n  } catch (error) {\n    // Error getting images from Path Finder, fall back to Finder\n    console.error(\"Couldn't get images from Path Finder\");\n    inputMethodError = true;\n  }\n\n  // Get selected images from Finder -- use as fallback for desktop selections & on error\n  const finderImages = (await getSelectedFinderImages()).split(\", \");\n  if (activeApp == \"Finder\" || inputMethod == \"Finder\" || inputMethodError) {\n    selectedImages.push(...finderImages);\n  } else {\n    // Add desktop selections\n    finderImages.forEach((imgPath) => {\n      if (imgPath.split(\"/\").at(-2) == \"Desktop\" && !selectedImages.includes(imgPath)) {\n        selectedImages.push(imgPath);\n      }\n    });\n  }\n\n  return selectedImages;\n};\n\n/**\n * Puts the produced images in the user's preferred location, deleting the files at the given paths.\n *\n * @param imagePaths The paths of the produced images.\n * @returns A promise resolving when the operation is complete.\n */\nexport const moveImageResultsToFinalDestination = async (imagePaths: string[]) => {\n  const preferences = getPreferenceValues<ExtensionPreferences>();\n  // Handle the result per the user's preference\n  if (preferences.imageResultHandling == ImageResultHandling.CopyToClipboard) {\n    await copyImagesAtPathsToClipboard(imagePaths);\n    deleteFiles(imagePaths);\n  } else if (preferences.imageResultHandling == ImageResultHandling.OpenInPreview) {\n    console.log(imagePaths);\n    await openPathsInPreview(imagePaths);\n    deleteFiles(imagePaths);\n  }\n};\n\nexport const getWebPBinaryPath = async () => {\n  const cpuType = os.cpus()[0].model.includes(\"Apple\") ? \"arm\" : \"x86\";\n\n  if (cpuType == \"arm\") {\n    // Make sure the arm binaries are executable\n    execSync(`chmod +x ${environment.assetsPath}/webp/arm/dwebp`);\n    execSync(`chmod +x ${environment.assetsPath}/webp/arm/cwebp`);\n    // Remove x86 binaries if they exist\n    if (fs.existsSync(`${environment.assetsPath}/webp/x86/dwebp`)) {\n      await fs.promises.rm(`${environment.assetsPath}/webp/x86/dwebp`);\n    }\n    if (fs.existsSync(`${environment.assetsPath}/webp/x86/cwebp`)) {\n      await fs.promises.rm(`${environment.assetsPath}/webp/x86/cwebp`);\n    }\n    return [`${environment.assetsPath}/webp/arm/dwebp`, `${environment.assetsPath}/webp/arm/cwebp`];\n  } else {\n    // Make sure the x86 binaries are executable\n    execSync(`chmod +x ${environment.assetsPath}/webp/x86/dwebp`);\n    execSync(`chmod +x ${environment.assetsPath}/webp/x86/cwebp`);\n\n    // Remove arm binaries if they exist\n    if (fs.existsSync(`${environment.assetsPath}/webp/arm/dwebp`)) {\n      await fs.promises.rm(`${environment.assetsPath}/webp/arm/dwebp`);\n    }\n    if (fs.existsSync(`${environment.assetsPath}/webp/arm/cwebp`)) {\n      await fs.promises.rm(`${environment.assetsPath}/webp/arm/cwebp`);\n    }\n    return [`${environment.assetsPath}/webp/x86/dwebp`, `${environment.assetsPath}/webp/x86/cwebp`];\n  }\n};\n\n/**\n * Executes a SIPS command on a WebP image, using a temporary PNG in the process.\n *\n * @param command The SIPS command to execute.\n * @param webpPath The path of the WebP image.\n * @returns A promise resolving to the path of the resulting image.\n */\nexport const execSIPSCommandOnWebP = async (command: string, webpPath: string): Promise<string> => {\n  const preferences = getPreferenceValues<ExtensionPreferences>();\n  const tmpPath = `${environment.supportPath}/tmp.png`;\n\n  let newPath = webpPath;\n  if (preferences.imageResultHandling == ImageResultHandling.SaveToDownloads) {\n    newPath = path.join(os.homedir(), \"Downloads\", path.basename(newPath));\n  } else if (preferences.imageResultHandling == ImageResultHandling.SaveToDesktop) {\n    newPath = path.join(os.homedir(), \"Desktop\", path.basename(newPath));\n  } else if (\n    preferences.imageResultHandling == ImageResultHandling.CopyToClipboard ||\n    preferences.imageResultHandling == ImageResultHandling.OpenInPreview\n  ) {\n    newPath = path.join(os.tmpdir(), path.basename(newPath));\n  }\n\n  let iter = 2;\n  while (fs.existsSync(newPath) && os.tmpdir() != path.dirname(newPath)) {\n    newPath = path.join(\n      path.dirname(newPath),\n      path.basename(newPath, path.extname(newPath)) + ` (${iter})${path.extname(newPath)}`\n    );\n    iter++;\n  }\n\n  const [dwebpPath, cwebpPath] = await getWebPBinaryPath();\n\n  execSync(\n    `${dwebpPath} \"${webpPath}\" -o \"${tmpPath}\" && ${command} \"${tmpPath}\" && ${cwebpPath} \"${tmpPath}\" -o \"${newPath}\" ; rm \"${tmpPath}\"`\n  );\n  return newPath;\n};\n\n/**\n * Executes a SIPS command on an SVG image, using a temporary PNG in the process.\n *\n * @param command The SIPS command to execute.\n * @param svgPath The path of the SVG image.\n */\nexport const execSIPSCommandOnSVG = async (command: string, svgPath: string): Promise<string> => {\n  const preferences = getPreferenceValues<ExtensionPreferences>();\n  const tmpPath = `${environment.supportPath}/tmp.bmp`;\n\n  let newPath = svgPath;\n  if (preferences.imageResultHandling == ImageResultHandling.SaveToDownloads) {\n    newPath = path.join(os.homedir(), \"Downloads\", path.basename(newPath));\n  } else if (preferences.imageResultHandling == ImageResultHandling.SaveToDesktop) {\n    newPath = path.join(os.homedir(), \"Desktop\", path.basename(newPath));\n  } else if (\n    preferences.imageResultHandling == ImageResultHandling.CopyToClipboard ||\n    preferences.imageResultHandling == ImageResultHandling.OpenInPreview\n  ) {\n    newPath = path.join(os.tmpdir(), path.basename(newPath));\n  }\n\n  let iter = 2;\n  while (fs.existsSync(newPath) && os.tmpdir() != path.dirname(newPath)) {\n    newPath = path.join(\n      path.dirname(newPath),\n      path.basename(newPath, path.extname(newPath)) + ` (${iter})${path.extname(newPath)}`\n    );\n    iter++;\n  }\n\n  convertSVG(\"BMP\", svgPath, tmpPath);\n  execSync(`chmod +x ${environment.assetsPath}/potrace/potrace`);\n  execSync(\n    `${command} \"${tmpPath}\" && ${environment.assetsPath}/potrace/potrace -s --tight -o \"${newPath}\" \"${tmpPath}\"; rm \"${tmpPath}\"`\n  );\n  return newPath;\n};\n\n/**\n * Converts an SVG to a SIPS-compatible image type.\n *\n * @param targetType The desired image type.\n * @param svgPath The path of the SVG image.\n * @param newPath The path to save the resulting image in.\n */\nexport const convertSVG = (targetType: string, svgPath: string, newPath: string) => {\n  runAppleScriptSync(`use framework \"Foundation\"\n  use scripting additions\n\n  -- Load SVG image from file\n  set svgFilePath to \"${svgPath}\"\n  set svgData to current application's NSData's alloc()'s initWithContentsOfFile:svgFilePath\n  \n  -- Create image from SVG data\n  set svgImage to current application's NSImage's alloc()'s initWithData:svgData\n  \n  -- Convert image to PNG data\n  set tiffData to svgImage's TIFFRepresentation()\n  set theBitmap to current application's NSBitmapImageRep's alloc()'s initWithData:tiffData\n  set pngData to theBitmap's representationUsingType:(current application's NSBitmapImageFileType${targetType}) |properties|:(missing value)\n  \n  -- Save PNG data to file\n  pngData's writeToFile:\"${newPath}\" atomically:false`);\n};\n\n/**\n * Converts a PDF to a SIPS-compatible image type, with each page stored in its own image file.\n *\n * @param targetType The desired image type.\n * @param pdfPath The path of the PDF document.\n * @param newPathBase The folder to place the resulting images in.\n */\nexport const convertPDF = (targetType: string, pdfPath: string, newPathBase: string) => {\n  const preferences = getPreferenceValues<ExtensionPreferences>();\n  runAppleScriptSync(`use framework \"Foundation\"\n  use framework \"PDFKit\"\n  \n  -- Load the PDF file as NSData\n  set pdfData to current application's NSData's dataWithContentsOfFile:\"${pdfPath}\"\n  \n  -- Create a PDFDocument from the PDF data\n  set pdfDoc to current application's PDFDocument's alloc()'s initWithData:pdfData\n\n  ${\n    preferences.imageResultHandling == ImageResultHandling.CopyToClipboard ||\n    preferences.imageResultHandling == ImageResultHandling.OpenInPreview\n      ? `set pageImages to current application's NSMutableArray's alloc()'s init()`\n      : ``\n  }\n  \n  set pageCount to (pdfDoc's pageCount()) - 1\n  repeat with pageIndex from 0 to pageCount\n    -- Create an NSImage from each page of the PDF document\n    set pdfPage to (pdfDoc's pageAtIndex:pageIndex)\n    set pdfRect to (pdfPage's boundsForBox:(current application's kPDFDisplayBoxMediaBox))\n    set pdfImage to (current application's NSImage's alloc()'s initWithSize:{item 1 of item 2 of pdfRect, item 2 of item 2 of pdfRect})\n    pdfImage's lockFocus()\n    (pdfPage's drawWithBox:(current application's kPDFDisplayBoxMediaBox))\n    pdfImage's unlockFocus()\n\n    ${\n      preferences.imageResultHandling == ImageResultHandling.CopyToClipboard\n        ? `pageImages's addObject:pdfImage`\n        : `\n  \n    -- Convert the NSImage to PNG data\n    set pngData to pdfImage's TIFFRepresentation()\n    set pngRep to (current application's NSBitmapImageRep's imageRepWithData:pngData)\n    set pngData to (pngRep's representationUsingType:(current application's NSPNGFileType) |properties|:(missing value))\n    \n    -- Write the PNG data to a new file\n    set filePath to \"${newPathBase}/page-\" & pageIndex + 1 & \".${targetType.toLowerCase()}\"\n    set fileURL to current application's NSURL's fileURLWithPath:filePath\n    ${preferences.imageResultHandling == ImageResultHandling.OpenInPreview ? `pageImages's addObject:fileURL` : ``}\n    pngData's writeToURL:fileURL atomically:false`\n    }\n  end repeat\n\n  ${\n    preferences.imageResultHandling == ImageResultHandling.OpenInPreview\n      ? `\n    -- Open the images of each page in Preview, then delete their temporary files\n    tell application \"Finder\"\n      set previewPath to POSIX path of ((application file id \"com.apple.Preview\") as text)\n      set previewURL to current application's NSURL's fileURLWithPath:previewPath\n    end tell\n\n    set workspace to current application's NSWorkspace's sharedWorkspace()\n    set config to current application's NSWorkspaceOpenConfiguration's configuration()\n    workspace's openURLs:pageImages withApplicationAtURL:previewURL configuration:config completionHandler:(missing value)\n    delay 1\n    \n    set fileManager to current application's NSFileManager's defaultManager()\n    repeat with imageURL in pageImages\n      fileManager's removeItemAtURL:imageURL |error|:(missing value)\n    end repeat\n    `\n      : ``\n  }\n  \n  ${\n    preferences.imageResultHandling == ImageResultHandling.CopyToClipboard\n      ? `\n    -- Copy the image of each page to the clipboard\n    set thePasteboard to current application's NSPasteboard's generalPasteboard()\n    thePasteboard's clearContents()\n    thePasteboard's writeObjects:pageImages`\n      : ``\n  }`);\n};\n\n/**\n * Rotates each page of a PDF by the specified degrees.\n *\n * @param pdfPath The path of the PDF to rotate.\n * @param degrees The amount to rotate each page by. Must be a multiple of 90.\n */\nexport const rotatePDF = (pdfPath: string, degrees: number): string => {\n  const preferences = getPreferenceValues<ExtensionPreferences>();\n\n  let newPath = pdfPath;\n  if (preferences.imageResultHandling == ImageResultHandling.SaveToDownloads) {\n    newPath = path.join(os.homedir(), \"Downloads\", path.basename(newPath, path.extname(newPath)) + \".pdf\");\n  } else if (preferences.imageResultHandling == ImageResultHandling.SaveToDesktop) {\n    newPath = path.join(os.homedir(), \"Desktop\", path.basename(newPath, path.extname(newPath)) + \".pdf\");\n  } else if (\n    preferences.imageResultHandling == ImageResultHandling.CopyToClipboard ||\n    preferences.imageResultHandling == ImageResultHandling.OpenInPreview\n  ) {\n    newPath = path.join(os.tmpdir(), path.basename(newPath, path.extname(newPath)) + \".pdf\");\n  }\n\n  let iter = 2;\n  while (fs.existsSync(newPath) && os.tmpdir() != path.dirname(newPath)) {\n    newPath = path.join(\n      path.dirname(newPath),\n      path.basename(newPath, path.extname(newPath)) + ` (${iter})${path.extname(newPath)}`\n    );\n    iter++;\n  }\n\n  runAppleScriptSync(`use framework \"Foundation\"\n  use framework \"PDFKit\"\n  \n  -- Load the PDF file as NSData\n  set pdfData to current application's NSData's dataWithContentsOfFile:\"${pdfPath}\"\n  \n  -- Create a PDFDocument from the PDF data\n  set pdfDoc to current application's PDFDocument's alloc()'s initWithData:pdfData\n  \n  -- Loop through the pages and rotate each one\n  repeat with i from 0 to ((pdfDoc's pageCount()) - 1)\n    set pdfPage to (pdfDoc's pageAtIndex:i)\n    pdfPage's setRotation:((pdfPage's |rotation|()) + ${degrees})\n  end repeat\n  \n  -- Write the modified PDF data to a new file\n  set rotatedPdfData to pdfDoc's dataRepresentation()\n  rotatedPdfData's writeToFile:\"${newPath}\" atomically:false`);\n  return newPath;\n};\n\n/**\n *\n * @param pdfPath The PDF to flip each page of.\n * @param direction The direction to flip. Must be a valid {@link Direction}.\n */\nexport const flipPDF = (pdfPath: string, direction: Direction) => {\n  const preferences = getPreferenceValues<ExtensionPreferences>();\n\n  let newPath = pdfPath;\n  if (preferences.imageResultHandling == ImageResultHandling.SaveToDownloads) {\n    newPath = path.join(os.homedir(), \"Downloads\", path.basename(newPath));\n  } else if (preferences.imageResultHandling == ImageResultHandling.SaveToDesktop) {\n    newPath = path.join(os.homedir(), \"Desktop\", path.basename(newPath));\n  } else if (\n    preferences.imageResultHandling == ImageResultHandling.CopyToClipboard ||\n    preferences.imageResultHandling == ImageResultHandling.OpenInPreview\n  ) {\n    newPath = path.join(os.tmpdir(), path.basename(newPath));\n  }\n\n  let iter = 2;\n  while (fs.existsSync(newPath) && os.tmpdir() != path.dirname(newPath)) {\n    newPath = path.join(\n      path.dirname(newPath),\n      path.basename(newPath, path.extname(newPath)) + ` (${iter})${path.extname(newPath)}`\n    );\n    iter++;\n  }\n\n  const flipInstruction =\n    direction == Direction.HORIZONTAL\n      ? `(transform's scaleXBy:-1 yBy:1)\n    (transform's translateXBy:(-(item 1 of item 2 of pdfRect)) yBy:0)`\n      : `(transform's scaleXBy:1 yBy:-1)\n    (transform's translateXBy:0 yBy:(-(item 2 of item 2 of pdfRect)))`;\n\n  runAppleScriptSync(`use framework \"Foundation\"\n  use framework \"PDFKit\"\n  \n  -- Load the PDF file as NSData\n  set pdfData to current application's NSData's dataWithContentsOfFile:\"${pdfPath}\"\n  \n  -- Create a PDFDocument from the PDF data\n  set pdfDoc to current application's PDFDocument's alloc()'s initWithData:pdfData\n  \n  -- Flip each page\n  repeat with i from 0 to ((pdfDoc's pageCount()) - 1)\n    set thePDFPage to (pdfDoc's pageAtIndex:i)\n    set pdfRect to (thePDFPage's boundsForBox:(current application's kPDFDisplayBoxMediaBox))\n    set flippedPdfImage to (current application's NSImage's alloc()'s initWithSize:(item 2 of pdfRect))\n    \n    flippedPdfImage's lockFocus()\n    set transform to current application's NSAffineTransform's alloc()'s init()\n    ${flipInstruction}\n    transform's concat()\n    (thePDFPage's drawWithBox:(current application's kPDFDisplayBoxMediaBox))\n    flippedPdfImage's unlockFocus()\n    \n    set newPage to (current application's PDFPage's alloc()'s initWithImage:flippedPdfImage)\n    \n    (pdfDoc's removePageAtIndex:i)\n    (pdfDoc's insertPage:newPage atIndex:i)\n  end repeat\n  \n  -- Write the modified PDF data to the file\n  set flippedPdfData to pdfDoc's dataRepresentation()\n  flippedPdfData's writeToFile:\"${newPath}\" atomically:false`);\n  return newPath;\n};\n\n/**\n * Gets the destination path for an image, given the original path and the desired extension, taking the user's preferences into account.\n * @param originalPath The original path of the image.\n * @param targetExtension The desired extension of the image. If not provided, the original extension will be used.\n * @returns The destination path for the image.\n */\nexport const getImageDestination = (originalPath: string, targetExtension?: string): string => {\n  const preferences = getPreferenceValues<ExtensionPreferences>();\n\n  // Decompose the original path into its components\n  const originalExtension = path.extname(originalPath);\n  const originalName = path.basename(originalPath, originalExtension);\n  const originalDir = path.dirname(originalPath);\n\n  // Construct & return the new path\n  const newExtension = targetExtension ? `${targetExtension}` : originalExtension;\n  const newFileName = `${originalName}.${newExtension}`;\n\n  if (preferences.imageResultHandling == ImageResultHandling.SaveToDownloads) {\n    const desktopPath = path.join(os.homedir(), \"Downloads\");\n    return path.join(desktopPath, newFileName);\n  } else if (preferences.imageResultHandling == ImageResultHandling.SaveToDesktop) {\n    const desktopPath = path.join(os.homedir(), \"Desktop\");\n    return path.join(desktopPath, newFileName);\n  }\n  return path.join(originalDir, newFileName);\n};\n\n/**\n * Opens the specified paths in Preview.\n *\n * @param filePaths The paths of the files to open.\n */\nexport const openPathsInPreview = async (filePaths: string | string[]) => {\n  const paths = Array.isArray(filePaths) ? filePaths : [filePaths];\n  const containsSVG = paths.some((p) => path.extname(p) == \".svg\");\n\n  await runAppleScript(`use framework \"Foundation\"\n    use scripting additions\n    set pageImages to {${paths.map((p) => `current application's NSURL's fileURLWithPath:\"${p}\"`).join(\", \")}}\n\n    set workspace to current application's NSWorkspace's sharedWorkspace()\n    set config to current application's NSWorkspaceOpenConfiguration's configuration()\n\n    ${\n      containsSVG\n        ? `tell application \"Finder\"\n            set safariPath to POSIX path of ((application file id \"com.apple.Safari\") as text)\n            set safariURL to current application's NSURL's fileURLWithPath:safariPath\n          end tell\n\n          workspace's openURLs:pageImages withApplicationAtURL:safariURL configuration:config completionHandler:(missing value)\n          \n          tell application \"Safari\"\n            set finished to false\n            set iter to 0\n            repeat while ((count of windows) = 0 or finished is not true) and iter < 10\n              delay 0.5\n              set iter to iter + 1\n\n              set currentStatus to true\n              repeat with doc in (path of documents as list)\n                repeat with thePath in {\"${paths.map((p) => encodeURI(`file://${p}`)).join('\", \"')}\"}\n                  if thePath is not in doc then\n                    set currentStatus to false\n                  end if\n                end repeat\n              end repeat\n              set finished to currentStatus\n            end repeat\n          end tell\n          `\n        : `tell application \"Finder\"\n            set previewPath to POSIX path of ((application file id \"com.apple.Preview\") as text)\n            set previewURL to current application's NSURL's fileURLWithPath:previewPath\n          end tell\n\n          workspace's openURLs:pageImages withApplicationAtURL:previewURL configuration:config completionHandler:(missing value)\n          \n          tell application \"Preview\"\n            set finished to false\n            set iter to 0\n            repeat while ((count of windows) = 0 or finished is not true) and iter < 10\n              delay 0.5\n              set iter to iter + 1\n\n              set currentStatus to true\n              repeat with doc in (path of documents as list)\n                repeat with thePath in {\"${paths.join('\", \"')}\"}\n                  if thePath is not in doc then\n                    set currentStatus to false\n                  end if\n                end repeat\n              end repeat\n              set finished to currentStatus\n            end repeat\n          end tell`\n    }`);\n};\n\n/**\n * Deletes the files at the given paths.\n *\n * @param filePaths The paths of the files to delete.\n */\nexport const deleteFiles = (filePaths: string | string[]) => {\n  const paths = Array.isArray(filePaths) ? filePaths : [filePaths];\n  for (const path of paths) {\n    fs.unlinkSync(path);\n  }\n};\n\n/**\n * Returns the name of the frontmost application based on whether it owns the menubar.\n *\n * @returns The name of the frontmost application, or \"Finder\" if no application owns the menubar, which shouldn't generally happen.\n */\nexport const getMenubarOwningApplication = () => {\n  return runAppleScriptSync(`use framework \"Foundation\"\n    use scripting additions\n    set workspace to current application's NSWorkspace's sharedWorkspace()\n    set runningApps to workspace's runningApplications()\n    \n    set targetApp to missing value\n    repeat with theApp in runningApps\n      if theApp's ownsMenuBar() then\n        set targetApp to theApp\n        exit repeat\n      end if\n    end repeat\n    \n    if targetApp is missing value then\n      return \"Finder\"\n    else\n      return targetApp's localizedName() as text\n    end if`);\n};\n\n/**\n * Returns the current directory of the file manager. Tries Path Finder first, if it's the frontmost application, then falls back to Finder.\n *\n * @returns The current directory of the file manager.\n */\nexport const getCurrentDirectory = () => {\n  // Get name of frontmost application\n  let activeApp = \"Finder\";\n  try {\n    activeApp = getMenubarOwningApplication();\n  } catch {\n    console.error(\"Couldn't get frontmost application\");\n  }\n\n  // Attempt to get current directory of Path Finder\n  try {\n    if (activeApp == \"Path Finder\") {\n      return runAppleScriptSync(`tell application \"Path Finder\"\n          if 1 \u2264 (count finder windows) then\n            get POSIX path of (target of finder window 1)\n          else\n            get POSIX path of desktop\n          end if\n        end tell`);\n    }\n  } catch (error) {\n    // Error getting directory of Path Finder, fall back to Finder\n    console.error(\"Couldn't get current directory of Path Finder\");\n  }\n\n  // Fallback to getting current directory from Finder\n  return runAppleScriptSync(`tell application \"Finder\"\n      if 1 <= (count Finder windows) then\n        get POSIX path of (target of window 1 as alias)\n      else\n        get POSIX path of (desktop as alias)\n      end if\n    end tell`);\n};\n\n/**\n * Returns the destination paths for the given original paths, based on the user's preferences.\n *\n * @param originalPaths The original paths of image files.\n * @param generated Whether the images were generated by the extension.\n * @returns The destination paths for the given original paths.\n */\nexport const getDestinationPaths = (originalPaths: string[], generated = false): string[] => {\n  const preferences = getPreferenceValues<ExtensionPreferences>();\n  return originalPaths.map((imgPath) => {\n    let newPath = imgPath;\n    if (preferences.imageResultHandling == ImageResultHandling.SaveToDownloads) {\n      newPath = path.join(os.homedir(), \"Downloads\", path.basename(newPath));\n    } else if (preferences.imageResultHandling == ImageResultHandling.SaveToDesktop) {\n      newPath = path.join(os.homedir(), \"Desktop\", path.basename(newPath));\n    } else if (\n      (preferences.imageResultHandling == ImageResultHandling.SaveInContainingFolder ||\n        preferences.imageResultHandling == ImageResultHandling.ReplaceOriginal) &&\n      (preferences.inputMethod == \"Clipboard\" || generated)\n    ) {\n      newPath = path.join(getCurrentDirectory(), path.basename(newPath));\n    } else if (\n      preferences.imageResultHandling == ImageResultHandling.CopyToClipboard ||\n      preferences.imageResultHandling == ImageResultHandling.OpenInPreview\n    ) {\n      newPath = path.join(os.tmpdir(), path.basename(newPath));\n    }\n\n    if (\n      preferences.imageResultHandling != ImageResultHandling.ReplaceOriginal &&\n      os.tmpdir() != path.dirname(newPath)\n    ) {\n      let iter = 2;\n      while (fs.existsSync(newPath)) {\n        newPath = path.join(\n          path.dirname(newPath),\n          path.basename(newPath, path.extname(newPath)) + ` (${iter})${path.extname(newPath)}`\n        );\n        iter++;\n      }\n    }\n\n    return newPath;\n  });\n};\n\n/**\n * Shows or updates a toast to display the given error, and logs the error to the console.\n *\n * @param title The title of the toast.\n * @param error The error to show.\n * @param toast The toast to update.\n */\nexport const showErrorToast = async (title: string, error: Error, toast?: Toast) => {\n  console.error(error);\n  if (!toast) {\n    toast = await showToast({\n      title: title,\n      message: error.message,\n      style: Toast.Style.Failure,\n      primaryAction: {\n        title: \"Copy Error\",\n        onAction: async () => {\n          await Clipboard.copy(error.message);\n        },\n      },\n    });\n  } else {\n    toast.title = title;\n    toast.message = error.message;\n    toast.style = Toast.Style.Failure;\n    toast.primaryAction = {\n      title: \"Copy Error\",\n      onAction: async () => {\n        await Clipboard.copy(error.message);\n      },\n    };\n  }\n};\n", "/**\n * @file utilities/clipboard.ts\n *\n * @summary Utilities for interacting with and getting images from the clipboard.\n * @author Stephen Kaplan <skaplanofficial@gmail.com>\n *\n * Created at     : 2023-07-06 14:50:26\n * Last modified  : 2023-07-06 15:48:31\n */\n\nimport { runAppleScript } from \"run-applescript\";\n\n/**\n * Gets the images from the clipboard as paths to temporary PNG files.\n *\n * @returns A promise resolving to the list of image paths.\n */\nexport const getClipboardImages = async (): Promise<string> => {\n  return runAppleScript(`use framework \"AppKit\"\n      use framework \"PDFKit\"\n      \n      set pb to current application's NSPasteboard's generalPasteboard()\n      set theItems to pb's readObjectsForClasses:({current application's NSURL, current application's NSImage, current application's NSAttributedString}) options:{}\n      \n      set theImages to {}\n      repeat with i from 0 to ((theItems's |count|()) - 1)\n        set theItem to (theItems's objectAtIndex:i)\n        if (theItem's |class|()) is current application's NSImage then\n          copy theItem to end of theImages\n        else if (theItem's |class|()) is current application's NSURL then\n          if (theItem's absoluteString() as text) ends with \".pdf\" then\n            set theImage to (current application's PDFDocument's alloc()'s initWithURL:theItem)\n          else\n            set theImage to (current application's NSImage's alloc()'s initWithContentsOfURL:theItem)\n          end if\n          if theImage is not missing value then\n            copy theImage to end of theImages\n          end if\n        else if (theItem's |class|()) is current application's NSConcreteAttributedString then\n          repeat with i from 0 to ((theItem's |length|()) - 1)\n            set attrs to (theItem's attributesAtIndex:i longestEffectiveRange:(missing value) inRange:{i, (theItem's |length|()) - i})\n            set theAttachment to (attrs's objectForKey:\"NSAttachment\")\n            if theAttachment is not missing value then\n              set cell to theAttachment's attachmentCell()\n              set theImage to cell's image()\n              copy theImage to end of theImages\n            end if\n          end repeat\n        end if\n      end repeat\n      \n      set tempDir to current application's NSTemporaryDirectory() as text\n      set filePaths to {}\n      repeat with i from 1 to count theImages\n        set theImage to item i of theImages\n        set theFile to tempDir & \"clipboardImage_\" & i\n        if theImage's |class|() is current application's PDFDocument then\n          set theFile to theFile & \".pdf\"\n          (theImage's writeToFile:theFile)\n        else\n          set theFile to theFile & \".png\"\n          set theTIFFData to theImage's TIFFRepresentation()\n          set theBitmap to (current application's NSBitmapImageRep's alloc()'s initWithData:theTIFFData)\n          set thePNGData to (theBitmap's representationUsingType:(current application's NSBitmapImageFileTypePNG) |properties|:(current application's NSDictionary's alloc()'s init()))\n          (thePNGData's writeToFile:theFile atomically:false)\n        end if\n        copy theFile to end of filePaths\n      end repeat\n      \n      return filePaths`);\n};\n\n/**\n * Copies the images at the given paths to the clipboard. Handles PDFs as well.\n *\n * @param filePaths The paths of the images to copy.\n */\nexport const copyImagesAtPathsToClipboard = async (filePaths: string | string[]) => {\n  const paths = Array.isArray(filePaths) ? filePaths : [filePaths];\n  await runAppleScript(`use framework \"Foundation\"\n      use framework \"PDFKit\"\n      use scripting additions\n  \n      set thePasteboard to current application's NSPasteboard's generalPasteboard()\n      thePasteboard's clearContents()\n      \n      -- Handle PDFs separately\n      set pdfPaths to {\"${paths.filter((p) => p.endsWith(\".pdf\")).join('\", \"')}\"}\n  \n      set pdfItems to current application's NSMutableArray's alloc()'s init()\n      repeat with pdfPath in pdfPaths\n        if length of pdfPath is not 0 then\n          set pdfItem to current application's NSPasteboardItem's alloc()'s init()\n          set pdfData to current application's NSData's dataWithContentsOfFile:pdfPath\n          pdfItem's setData:pdfData forType:(current application's NSPasteboardTypePDF)\n          pdfItems's addObject:pdfItem\n        end if\n      end repeat\n  \n      if pdfItems's |count|() > 0 then\n        thePasteboard's writeObjects:pdfItems\n      end if\n        \n      -- Handle all other image types\n      set theFiles to {\"${paths.join('\", \"')}\"}\n    \n      set theImages to {}\n      repeat with theFile in theFiles\n        if length of theFile is not 0 then\n          set theImage to (current application's NSImage's alloc()'s initWithContentsOfFile:theFile)\n          if theImage is not missing value then\n            copy theImage to end of theImages\n          end if\n        end if\n      end repeat\n      \n      if (count theImages) > 0 then\n        thePasteboard's writeObjects:theImages\n      end if`);\n};\n", "/**\n * @file components/ImagePatternGrid.tsx\n *\n * @summary Grid view for selecting an image pattern to generate.\n * @author Stephen Kaplan <skaplanofficial@gmail.com>\n *\n * Created at     : 2023-07-06 11:44:03\n * Last modified  : 2023-07-06 14:52:12\n */\n\nimport { useEffect, useState } from \"react\";\n\nimport { Grid } from \"@raycast/api\";\n\nimport {\n  generatePreview,\n  generators,\n  getCheckerboardOptions,\n  getLenticularHaloOptions,\n  getLinearGradientOptions,\n  getRadialGradientOptions,\n  getSolidColorOptions,\n  getStarShineOptions,\n  getStripeOptions,\n  getSunbeamsOptions,\n} from \"../utilities/generators\";\nimport { GeneratorOptions } from \"../utilities/types\";\nimport ImageGeneratorActionPanel from \"./ImageGeneratorActionPanel\";\n\n/**\n * A grid of image patterns used to generate full-size renders.\n *\n * @param props.width The width of the image to generate.\n * @param props.height The height of the image to generate.\n * @returns A grid component.\n */\nexport default function ImagePatternGrid(props: { width: number; height: number }) {\n  const { width, height } = props;\n\n  const [loading, setLoading] = useState<boolean>(true);\n\n  const [checkerboardItems, setCheckerboardItems] = useState<[string, GeneratorOptions][]>(Array(5).fill([\"\", {}]));\n  const [stripeItems, setStripeItems] = useState<[string, GeneratorOptions][]>(Array(5).fill([\"\", {}]));\n  const [solidColorItems, setSolidColorItems] = useState<[string, string, GeneratorOptions][]>(\n    Array(10).fill([\"\", \"\", {}])\n  );\n  const [linearGradientItems, setLinearGradientItems] = useState<[string, GeneratorOptions][]>(Array(5).fill([\"\", {}]));\n  const [radialGradientItems, setRadialGradientItems] = useState<[string, GeneratorOptions][]>(Array(5).fill([\"\", {}]));\n  const [randomItem, setRandomItem] = useState<string>(\"\");\n  const [starShineItem, setStarShineItem] = useState<[string, GeneratorOptions]>([\"\", {}]);\n  const [lenticularHaloItem, setLenticularHaloItem] = useState<[string, GeneratorOptions]>([\"\", {}]);\n  const [sunbeamsItem, setSunbeamsItem] = useState<[string, GeneratorOptions]>([\"\", {}]);\n\n  /**\n   * Regenerates the colors used in the image patterns.\n   *\n   * @returns An object containing the new color values.\n   */\n  const regenerateColors = () => {\n    const redValues = Array(10)\n      .fill(0)\n      .map(() => Math.floor(Math.random() * 256));\n    const greenValues = Array(10)\n      .fill(0)\n      .map(() => Math.floor(Math.random() * 256));\n    const blueValues = Array(10)\n      .fill(0)\n      .map(() => Math.floor(Math.random() * 256));\n    const alphaValues = Array(10)\n      .fill(0)\n      .map(() => Math.floor(Math.random() * 256));\n    return { redValues, greenValues, blueValues, alphaValues };\n  };\n\n  /**\n   * Regenerates the pattern preview images.\n   */\n  const regeneratePreviews = async () => {\n    setLoading(true);\n    const { redValues, greenValues, blueValues, alphaValues } = regenerateColors();\n    Promise.all([\n      Promise.all(\n        getCheckerboardOptions(redValues, greenValues, blueValues, alphaValues).map(async (options, index) => {\n          const content = await generatePreview(generators.Checkerboard.CIFilterName, options);\n          setCheckerboardItems((oldItems) => {\n            const newItems = [...oldItems];\n            newItems[index] = [content, options];\n            return newItems;\n          });\n        })\n      ),\n\n      Promise.all(\n        getStripeOptions(redValues, greenValues, blueValues, alphaValues).map(async (options, index) => {\n          const content = await generatePreview(generators.Stripes.CIFilterName, options);\n          setStripeItems((oldItems) => {\n            const newItems = [...oldItems];\n            newItems[index] = [content, options];\n            return newItems;\n          });\n        })\n      ),\n\n      Promise.all(\n        getSolidColorOptions(redValues, greenValues, blueValues).map(async (options, index) => {\n          const content = await generatePreview(generators.ConstantColor.CIFilterName, options);\n          setSolidColorItems((oldItems) => {\n            const newItems = [...oldItems];\n            newItems[index] = [\n              content,\n              `#${redValues[index].toString(16).padEnd(2, \"0\")}${greenValues[index]\n                .toString(16)\n                .padEnd(2, \"0\")}${blueValues[index].toString(16).padEnd(2, \"0\")}`,\n              options,\n            ];\n            return newItems;\n          });\n        })\n      ),\n\n      Promise.all(\n        getLinearGradientOptions(redValues, greenValues, blueValues, alphaValues).map(async (options, index) => {\n          const content = await generatePreview(generators.LinearGradient.CIFilterName, options);\n          setLinearGradientItems((oldItems) => {\n            const newItems = [...oldItems];\n            newItems[index] = [content, options];\n            return newItems;\n          });\n        })\n      ),\n\n      Promise.all(\n        getRadialGradientOptions(redValues, greenValues, blueValues, alphaValues).map(async (options, index) => {\n          const content = await generatePreview(generators.RadialGradient.CIFilterName, options);\n          setRadialGradientItems((oldItems) => {\n            const newItems = [...oldItems];\n            newItems[index] = [content, options];\n            return newItems;\n          });\n        })\n      ),\n\n      Promise.resolve(\n        (async () => {\n          const content = await generatePreview(generators.Random.CIFilterName, {});\n          setRandomItem(content);\n        })()\n      ),\n\n      Promise.resolve(\n        (async () => {\n          const options = getStarShineOptions(redValues, greenValues, blueValues, alphaValues);\n          const content = await generatePreview(generators.StarShine.CIFilterName, options);\n          setStarShineItem([content, options]);\n        })()\n      ),\n\n      Promise.resolve(\n        (async () => {\n          const options = getLenticularHaloOptions(redValues, greenValues, blueValues, alphaValues);\n          const content = await generatePreview(generators.LenticularHalo.CIFilterName, options);\n          setLenticularHaloItem([content, options]);\n        })()\n      ),\n\n      Promise.resolve(\n        (async () => {\n          const options = getSunbeamsOptions(redValues, greenValues, blueValues, alphaValues);\n          const content = await generatePreview(generators.Sunbeams.CIFilterName, options);\n          setSunbeamsItem([content, options]);\n        })()\n      ),\n    ]).then(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    regeneratePreviews();\n  }, []);\n\n  const checkerboardPreviews = checkerboardItems.map(([preview, options], index: number) => (\n    <Grid.Item\n      title={`Checkerboard ${index + 1}`}\n      key={`Checkerboard ${index + 1}`}\n      content={{ source: preview == \"\" ? generators.Checkerboard.thumbnail : preview }}\n      actions={\n        <ImageGeneratorActionPanel\n          objectType=\"Checkerboard\"\n          generator={generators.Checkerboard}\n          width={width}\n          height={height}\n          preview={preview}\n          options={options}\n          regeneratePreviews={regeneratePreviews}\n        />\n      }\n    />\n  ));\n\n  const stripePreviews = stripeItems.map(([preview, options], index: number) => (\n    <Grid.Item\n      title={`Stripes ${index + 1}`}\n      key={`Stripes ${index + 1}`}\n      content={{ source: preview == \"\" ? generators.Stripes.thumbnail : preview }}\n      actions={\n        <ImageGeneratorActionPanel\n          objectType=\"Stripes\"\n          generator={generators.Stripes}\n          width={width}\n          height={height}\n          preview={preview}\n          options={options}\n          regeneratePreviews={regeneratePreviews}\n        />\n      }\n    />\n  ));\n\n  const solidColorPreviews = solidColorItems.map(([preview, title, options], index: number) => {\n    return (\n      <Grid.Item\n        title={title}\n        key={`Solid Color ${index + 1}`}\n        content={{ source: preview == \"\" ? generators.ConstantColor.thumbnail : preview }}\n        actions={\n          <ImageGeneratorActionPanel\n            objectType={title}\n            generator={generators.ConstantColor}\n            width={width}\n            height={height}\n            preview={preview}\n            options={options}\n            regeneratePreviews={regeneratePreviews}\n          />\n        }\n      />\n    );\n  });\n\n  const linearGradientPreviews = linearGradientItems.map(([preview, options], index: number) => (\n    <Grid.Item\n      title={`Linear Gradient ${index + 1}`}\n      key={`Linear Gradient ${index + 1}`}\n      content={{ source: preview == \"\" ? generators.LinearGradient.thumbnail : preview }}\n      actions={\n        <ImageGeneratorActionPanel\n          objectType=\"Linear Gradient\"\n          generator={generators.LinearGradient}\n          width={width}\n          height={height}\n          preview={preview}\n          options={options}\n          regeneratePreviews={regeneratePreviews}\n        />\n      }\n    />\n  ));\n\n  const radialGradientPreviews = radialGradientItems.map(([preview, options], index: number) => (\n    <Grid.Item\n      title={`Radial Gradient ${index + 1}`}\n      key={`Radial Gradient ${index + 1}`}\n      content={{ source: preview == \"\" ? generators.RadialGradient.thumbnail : preview }}\n      actions={\n        <ImageGeneratorActionPanel\n          objectType=\"Radial Gradient\"\n          generator={generators.RadialGradient}\n          width={width}\n          height={height}\n          preview={preview}\n          options={options}\n          regeneratePreviews={regeneratePreviews}\n        />\n      }\n    />\n  ));\n\n  const randomPreview = (\n    <Grid.Item\n      title=\"Random\"\n      key=\"Random\"\n      content={{ source: randomItem == \"\" ? generators.Random.thumbnail : randomItem }}\n      actions={\n        <ImageGeneratorActionPanel\n          objectType=\"Random\"\n          generator={generators.Random}\n          width={width}\n          height={height}\n          preview={randomItem}\n          options={{}}\n          regeneratePreviews={regeneratePreviews}\n        />\n      }\n    />\n  );\n\n  const starShinePreview = (\n    <Grid.Item\n      title=\"Star Shine\"\n      key=\"Star Shine\"\n      content={{ source: starShineItem[0] == \"\" ? generators.StarShine.thumbnail : starShineItem[0] }}\n      actions={\n        <ImageGeneratorActionPanel\n          objectType=\"Star Shine\"\n          generator={generators.StarShine}\n          width={width}\n          height={height}\n          preview={starShineItem[0]}\n          options={starShineItem[1]}\n          regeneratePreviews={regeneratePreviews}\n        />\n      }\n    />\n  );\n\n  const lenticularHaloPreview = (\n    <Grid.Item\n      title=\"Lenticular Halo\"\n      key=\"Lenticular Halo\"\n      content={{ source: lenticularHaloItem[0] == \"\" ? generators.LenticularHalo.thumbnail : lenticularHaloItem[0] }}\n      actions={\n        <ImageGeneratorActionPanel\n          objectType=\"Lenticular Halo\"\n          generator={generators.LenticularHalo}\n          width={width}\n          height={height}\n          preview={lenticularHaloItem[0]}\n          options={lenticularHaloItem[1]}\n          regeneratePreviews={regeneratePreviews}\n        />\n      }\n    />\n  );\n\n  const sunbeamsPreview = (\n    <Grid.Item\n      title=\"Sunbeams\"\n      key=\"Sunbeams\"\n      content={{ source: sunbeamsItem[0] == \"\" ? generators.Sunbeams.thumbnail : sunbeamsItem[0] }}\n      actions={\n        <ImageGeneratorActionPanel\n          objectType=\"Sunbeams\"\n          generator={generators.Sunbeams}\n          width={width}\n          height={height}\n          preview={sunbeamsItem[0]}\n          options={sunbeamsItem[1]}\n          regeneratePreviews={regeneratePreviews}\n        />\n      }\n    />\n  );\n\n  return (\n    <Grid navigationTitle=\"Image Pattern Options\" isLoading={loading} inset={Grid.Inset.Small}>\n      <Grid.Section title=\"Patterns\">\n        {checkerboardPreviews}\n        {stripePreviews}\n      </Grid.Section>\n\n      <Grid.Section title=\"Solid Colors\">{solidColorPreviews}</Grid.Section>\n\n      <Grid.Section title=\"Gradients\">\n        {linearGradientPreviews}\n        {radialGradientPreviews}\n      </Grid.Section>\n\n      <Grid.Section title=\"Other\">\n        {lenticularHaloPreview}\n        {randomPreview}\n        {starShinePreview}\n        {sunbeamsPreview}\n      </Grid.Section>\n    </Grid>\n  );\n}\n", "/**\n * @file components/ImageGeneratorActionPanel.tsx\n *\n * @summary Action panel for image generator grid items.\n * @author Stephen Kaplan <skaplanofficial@gmail.com>\n *\n * Created at     : 2023-07-06 11:45:04\n * Last modified  : 2023-07-06 16:47:05\n */\n\nimport os from \"os\";\nimport path from \"path\";\n\nimport { Action, ActionPanel, Icon, showToast, Toast } from \"@raycast/api\";\n\nimport { Generator } from \"../utilities/types\";\nimport { cleanup, getDestinationPaths, moveImageResultsToFinalDestination, showErrorToast } from \"../utilities/utils\";\n\n/**\n * Action panel for image generators displayed in the main grid.\n *\n * @param props.generator The generator to use.\n * @param props.width The width of the generated image.\n * @param props.height The height of the generated image.\n * @param props.options The options to pass to the generator.\n * @param props.filename The filename to use for the generated image.\n * @param props.objectType The type of object being generated.\n * @param props.setColors The function to update the colors and trigger a re-render.\n * @returns The action panel for the generator.\n */\nexport default function ImageGeneratorActionPanel(props: {\n  generator: Generator;\n  width: number;\n  height: number;\n  preview: string;\n  options: { [key: string]: unknown };\n  objectType: string;\n  regeneratePreviews: () => void;\n}) {\n  const { generator, width, height, preview, options, objectType, regeneratePreviews } = props;\n  return (\n    <ActionPanel>\n      <Action\n        title={`Create ${objectType}`}\n        icon={Icon.Image}\n        onAction={async () => {\n          const destinations = getDestinationPaths(\n            [path.join(os.tmpdir(), `${objectType.replaceAll(\" \", \"_\").toLowerCase()}.png`)],\n            true\n          );\n          const toast = await showToast({ title: `Creating ${objectType}...`, style: Toast.Style.Animated });\n          try {\n            await generator.applyMethod(destinations[0], generator.CIFilterName, width, height, options);\n            await moveImageResultsToFinalDestination(destinations);\n            toast.title = `Created ${objectType}`;\n            toast.style = Toast.Style.Success;\n          } catch (error) {\n            await showErrorToast(`Failed To Create ${objectType}`, error as Error, toast);\n          } finally {\n            cleanup();\n          }\n        }}\n      />\n      <Action\n        title=\"Randomize Colors\"\n        icon={Icon.Shuffle}\n        shortcut={{ modifiers: [\"cmd\"], key: \"r\" }}\n        onAction={regeneratePreviews}\n      />\n\n      <ActionPanel.Section title=\"Clipboard Actions\">\n        <Action.Paste\n          title=\"Paste Preview In Active App\"\n          shortcut={{ modifiers: [\"cmd\", \"shift\"], key: \"v\" }}\n          content={{ html: `<img src=\"${preview}\" />` }}\n        />\n        <Action.CopyToClipboard\n          title=\"Copy Preview Image\"\n          shortcut={{ modifiers: [\"cmd\", \"shift\"], key: \"c\" }}\n          content={{ html: `<img src=\"${preview}\" />` }}\n        />\n        <Action.CopyToClipboard\n          title=\"Copy Preview Data URL\"\n          content={preview}\n          shortcut={{ modifiers: [\"cmd\", \"shift\"], key: \"u\" }}\n        />\n      </ActionPanel.Section>\n    </ActionPanel>\n  );\n}\n"],
  "mappings": "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",
  "names": ["require_windows", "__commonJSMin", "exports", "module", "isexe", "sync", "fs", "checkPathExt", "path", "options", "pathext", "p", "checkStat", "stat", "cb", "er", "require_mode", "__commonJSMin", "exports", "module", "isexe", "sync", "fs", "path", "options", "cb", "er", "stat", "checkStat", "checkMode", "mod", "uid", "gid", "myUid", "myGid", "u", "g", "o", "ug", "ret", "require_isexe", "__commonJSMin", "exports", "module", "fs", "core", "isexe", "sync", "path", "options", "cb", "resolve", "reject", "er", "is", "require_which", "__commonJSMin", "exports", "module", "isWindows", "path", "COLON", "isexe", "getNotFoundError", "cmd", "getPathInfo", "opt", "colon", "pathEnv", "pathExtExe", "pathExt", "which", "cb", "found", "step", "i", "resolve", "reject", "ppRaw", "pathPart", "pCmd", "p", "subStep", "ii", "ext", "er", "is", "res", "whichSync", "j", "cur", "require_path_key", "__commonJSMin", "exports", "module", "pathKey", "options", "environment", "key", "require_resolveCommand", "__commonJSMin", "exports", "module", "path", "which", "getPathKey", "resolveCommandAttempt", "parsed", "withoutPathExt", "env", "cwd", "hasCustomCwd", "shouldSwitchCwd", "resolved", "resolveCommand", "require_escape", "__commonJSMin", "exports", "module", "metaCharsRegExp", "escapeCommand", "arg", "escapeArgument", "doubleEscapeMetaChars", "require_shebang_regex", "__commonJSMin", "exports", "module", "require_shebang_command", "__commonJSMin", "exports", "module", "shebangRegex", "string", "match", "path", "argument", "binary", "require_readShebang", "__commonJSMin", "exports", "module", "fs", "shebangCommand", "readShebang", "command", "buffer", "fd", "require_parse", "__commonJSMin", "exports", "module", "path", "resolveCommand", "escape", "readShebang", "isWin", "isExecutableRegExp", "isCmdShimRegExp", "detectShebang", "parsed", "shebang", "parseNonShell", "commandFile", "needsShell", "needsDoubleEscapeMetaChars", "arg", "shellCommand", "parse", "command", "args", "options", "require_enoent", "__commonJSMin", "exports", "module", "isWin", "notFoundError", "original", "syscall", "hookChildProcess", "cp", "parsed", "originalEmit", "name", "arg1", "err", "verifyENOENT", "status", "verifyENOENTSync", "require_cross_spawn", "__commonJSMin", "exports", "module", "cp", "parse", "enoent", "spawn", "command", "args", "options", "parsed", "spawned", "spawnSync", "result", "require_strip_final_newline", "__commonJSMin", "exports", "module", "input", "LF", "CR", "require_npm_run_path", "__commonJSMin", "exports", "module", "path", "pathKey", "npmRunPath", "options", "previous", "cwdPath", "result", "execPathDir", "env", "require_mimic_fn", "__commonJSMin", "exports", "module", "mimicFn", "to", "from", "prop", "require_onetime", "__commonJSMin", "exports", "module", "mimicFn", "calledFunctions", "onetime", "function_", "options", "returnValue", "callCount", "functionName", "arguments_", "SIGNALS", "name", "number", "action", "description", "standard", "forced", "exports", "getRealtimeSignals", "length", "SIGRTMAX", "SIGRTMIN", "Array", "from", "getRealtimeSignal", "exports", "value", "index", "name", "number", "action", "description", "standard", "_os", "_core", "_realtime", "getSignals", "realtimeSignals", "SIGNALS", "map", "normalizeSignal", "exports", "name", "number", "defaultNumber", "description", "action", "forced", "standard", "signals", "constantSignal", "constants", "supported", "undefined", "_os", "_signals", "_realtime", "getSignalsByName", "reduce", "getSignalByName", "signalByNameMemo", "name", "number", "description", "supported", "action", "forced", "standard", "signalsByName", "exports", "getSignalsByNumber", "signals", "length", "SIGRTMAX", "signalsA", "Array", "from", "value", "getSignalByNumber", "Object", "assign", "signal", "findSignalByNumber", "undefined", "find", "constants", "signalA", "signalsByNumber", "require_error", "__commonJSMin", "exports", "module", "signalsByName", "getErrorPrefix", "timedOut", "timeout", "errorCode", "signal", "signalDescription", "exitCode", "isCanceled", "makeError", "stdout", "stderr", "all", "error", "command", "escapedCommand", "killed", "execaMessage", "isError", "shortMessage", "message", "require_stdio", "__commonJSMin", "exports", "module", "aliases", "hasAlias", "options", "alias", "normalizeStdio", "stdio", "length", "value", "index", "require_signals", "__commonJSMin", "exports", "module", "require_signal_exit", "__commonJSMin", "exports", "module", "process", "processOk", "assert", "signals", "isWin", "EE", "emitter", "cb", "opts", "loaded", "load", "ev", "remove", "unload", "sig", "sigListeners", "originalProcessEmit", "originalProcessReallyExit", "emit", "event", "code", "signal", "listeners", "processEmit", "processReallyExit", "arg", "ret", "require_kill", "__commonJSMin", "exports", "module", "os", "onExit", "DEFAULT_FORCE_KILL_TIMEOUT", "spawnedKill", "kill", "signal", "options", "killResult", "setKillTimeout", "shouldForceKill", "timeout", "getForceKillAfterTimeout", "t", "forceKillAfterTimeout", "isSigterm", "spawnedCancel", "spawned", "context", "timeoutKill", "reject", "setupTimeout", "killSignal", "spawnedPromise", "timeoutId", "timeoutPromise", "resolve", "safeSpawnedPromise", "validateTimeout", "setExitHandler", "cleanup", "detached", "timedPromise", "removeExitHandler", "require_is_stream", "__commonJSMin", "exports", "module", "isStream", "stream", "require_buffer_stream", "__commonJSMin", "exports", "module", "PassThroughStream", "options", "array", "encoding", "isBuffer", "objectMode", "stream", "length", "chunks", "chunk", "require_get_stream", "__commonJSMin", "exports", "module", "BufferConstants", "stream", "promisify", "bufferStream", "streamPipelinePromisified", "MaxBufferError", "getStream", "inputStream", "options", "maxBuffer", "resolve", "reject", "rejectPromise", "error", "require_merge_stream", "__commonJSMin", "exports", "module", "PassThrough", "sources", "output", "add", "isEmpty", "remove", "source", "it", "require_stream", "__commonJSMin", "exports", "module", "isStream", "getStream", "mergeStream", "handleInput", "spawned", "input", "makeAllStream", "all", "mixed", "getBufferedData", "stream", "streamPromise", "error", "getStreamPromise", "encoding", "buffer", "maxBuffer", "getSpawnedResult", "stdout", "stderr", "processDone", "stdoutPromise", "stderrPromise", "allPromise", "validateInputSync", "require_promise", "__commonJSMin", "exports", "module", "nativePromisePrototype", "descriptors", "property", "mergePromise", "spawned", "promise", "descriptor", "value", "args", "getSpawnedPromise", "resolve", "reject", "exitCode", "signal", "error", "require_command", "__commonJSMin", "exports", "module", "normalizeArgs", "file", "args", "NO_ESCAPE_REGEXP", "DOUBLE_QUOTES_REGEXP", "escapeArg", "arg", "joinCommand", "getEscapedCommand", "SPACES_REGEXP", "parseCommand", "command", "tokens", "token", "previousToken", "require_execa", "__commonJSMin", "exports", "module", "path", "childProcess", "crossSpawn", "stripFinalNewline", "npmRunPath", "onetime", "makeError", "normalizeStdio", "spawnedKill", "spawnedCancel", "setupTimeout", "validateTimeout", "setExitHandler", "handleInput", "getSpawnedResult", "makeAllStream", "validateInputSync", "mergePromise", "getSpawnedPromise", "joinCommand", "parseCommand", "getEscapedCommand", "DEFAULT_MAX_BUFFER", "getEnv", "envOption", "extendEnv", "preferLocal", "localDir", "execPath", "env", "handleArguments", "file", "args", "options", "parsed", "handleOutput", "value", "error", "execa", "command", "escapedCommand", "spawned", "dummySpawned", "errorPromise", "spawnedPromise", "timedPromise", "processDone", "context", "handlePromiseOnce", "exitCode", "signal", "timedOut", "stdoutResult", "stderrResult", "allResult", "stdout", "stderr", "all", "returnedError", "result", "scriptPath", "stdio", "defaultExecArgv", "arg", "nodePath", "nodeOptions", "create_image_exports", "__export", "Command", "__toCommonJS", "import_api", "import_node_process", "import_execa", "runAppleScript", "script", "humanReadableOutput", "process", "outputArguments", "stdout", "execa", "runAppleScriptSync", "standardDimensions", "generatePlaceholder", "width", "height", "destination", "runAppleScript", "generatePreview", "CIFilterName", "inputs", "key", "value", "generate", "generators", "getCheckerboardOptions", "redValues", "greenValues", "blueValues", "alphaValues", "getStripeOptions", "getSolidColorOptions", "_", "i", "getLinearGradientOptions", "getRadialGradientOptions", "getStarShineOptions", "getLenticularHaloOptions", "getSunbeamsOptions", "import_os", "import_path", "import_api", "fs", "os", "import_path", "import_api", "copyImagesAtPathsToClipboard", "filePaths", "paths", "runAppleScript", "p", "cleanup", "itemsToRemoveArray", "item", "moveImageResultsToFinalDestination", "imagePaths", "preferences", "copyImagesAtPathsToClipboard", "deleteFiles", "openPathsInPreview", "openPathsInPreview", "filePaths", "paths", "containsSVG", "p", "path", "runAppleScript", "deleteFiles", "getMenubarOwningApplication", "runAppleScriptSync", "getCurrentDirectory", "activeApp", "getDestinationPaths", "originalPaths", "generated", "preferences", "imgPath", "newPath", "iter", "showErrorToast", "title", "error", "toast", "import_react", "import_api", "import_os", "import_path", "import_api", "import_jsx_runtime", "ImageGeneratorActionPanel", "props", "generator", "width", "height", "preview", "options", "objectType", "regeneratePreviews", "destinations", "getDestinationPaths", "path", "os", "toast", "moveImageResultsToFinalDestination", "error", "showErrorToast", "cleanup", "import_jsx_runtime", "ImagePatternGrid", "props", "width", "height", "loading", "setLoading", "checkerboardItems", "setCheckerboardItems", "stripeItems", "setStripeItems", "solidColorItems", "setSolidColorItems", "linearGradientItems", "setLinearGradientItems", "radialGradientItems", "setRadialGradientItems", "randomItem", "setRandomItem", "starShineItem", "setStarShineItem", "lenticularHaloItem", "setLenticularHaloItem", "sunbeamsItem", "setSunbeamsItem", "regenerateColors", "redValues", "greenValues", "blueValues", "alphaValues", "regeneratePreviews", "getCheckerboardOptions", "options", "index", "content", "generatePreview", "generators", "oldItems", "newItems", "getStripeOptions", "getSolidColorOptions", "getLinearGradientOptions", "getRadialGradientOptions", "getStarShineOptions", "getLenticularHaloOptions", "getSunbeamsOptions", "checkerboardPreviews", "preview", "ImageGeneratorActionPanel", "stripePreviews", "solidColorPreviews", "title", "linearGradientPreviews", "radialGradientPreviews", "randomPreview", "starShinePreview", "lenticularHaloPreview", "sunbeamsPreview", "import_jsx_runtime", "SizeSelectionActionPanel", "props", "width", "height", "ImagePatternGrid", "destinations", "getDestinationPaths", "path", "os", "toast", "generatePlaceholder", "moveImageResultsToFinalDestination", "error", "showErrorToast", "cleanup", "dataURL", "import_jsx_runtime", "Command", "squareOptions", "standardDimensions", "width", "height", "SizeSelectionActionPanel", "wideOptions", "tallOptions", "extremeOptions"]
}
