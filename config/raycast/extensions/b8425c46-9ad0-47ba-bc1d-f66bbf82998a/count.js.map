{
  "version": 3,
  "sources": ["../src/count.tsx", "../src/lib/count/count.ts", "../src/utils.ts"],
  "sourcesContent": ["import { Action, ActionPanel, Form, Icon } from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { count } from \"./lib/count\";\nimport { readFromSelection, readFromClipboard } from \"./utils\";\n\nexport default function Command() {\n  const [text, setText] = useState(\"\");\n  const [includeWhitespace, setIncludeWhitespace] = useState(true);\n  const [result, setResult] = useState<string>(\"\");\n\n  useEffect(() => {\n    (async () => {\n      let content = await readFromSelection();\n\n      if (!content) {\n        content = await readFromClipboard();\n      }\n\n      setText(content);\n    })();\n  }, []);\n\n  useEffect(() => {\n    const result = count(text, includeWhitespace);\n    const resultStr = `${result.characters} characters \u00B7 ${result.words} words \\n${result.sentences} sentences \u00B7 ${result.paragraphs} paragraphs \\n${result.reading_time} minutes to read \u00B7 ${result.speaking_time} minutes to speak`;\n    setResult(resultStr);\n  }, [text, includeWhitespace]);\n\n  const actions = (\n    <ActionPanel>\n      <Action\n        title=\"Toggle Whitespace\"\n        onAction={() => setIncludeWhitespace(!includeWhitespace)}\n        shortcut={{\n          modifiers: [\"cmd\"],\n          key: \"t\",\n        }}\n        icon={Icon.Switch}\n      />\n      <Action\n        title=\"Clear Text\"\n        onAction={() => setText(\"\")}\n        shortcut={{\n          modifiers: [\"cmd\"],\n          key: \"e\",\n        }}\n        icon={Icon.Trash}\n      />\n    </ActionPanel>\n  );\n\n  return (\n    <Form actions={actions}>\n      <Form.Description text={result} />\n      <Form.TextArea id=\"text\" title=\"Text to Count\" placeholder=\"Start typing...\" value={text} onChange={setText} />\n      <Form.Checkbox\n        id=\"include-whitespace\"\n        title=\"Options\"\n        label=\"Include whitespace in character count\"\n        value={includeWhitespace}\n        onChange={setIncludeWhitespace}\n      />\n    </Form>\n  );\n}\n", "/**\n * Modified from implementation in @RadLikeWhoa/Countable\n * @source https://github.com/RadLikeWhoa/Countable\n * @license MIT\n */\n\nimport { ICountResult } from \"./types\";\n\nconst decode = (string: string) => {\n  const output = [];\n  let counter = 0;\n  const length = string.length;\n\n  while (counter < length) {\n    const value = string.charCodeAt(counter++);\n\n    if (value >= 0xd800 && value <= 0xdbff && counter < length) {\n      // It's a high surrogate, and there is a next character.\n\n      const extra = string.charCodeAt(counter++);\n\n      if ((extra & 0xfc00) == 0xdc00) {\n        // Low surrogate.\n        output.push(((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);\n      } else {\n        // It's an unmatched surrogate; only append this code unit, in case the\n        // next code unit is the high surrogate of a surrogate pair.\n\n        output.push(value);\n        counter--;\n      }\n    } else {\n      output.push(value);\n    }\n  }\n\n  return output;\n};\n\n/**\n * Adapted work from\n * Most of the performance improvements are based on the works of @epmatsw.\n * @source <http://goo.gl/SWOLB>\n */\nexport const count = (text: string, includeWhitespace: boolean): ICountResult => {\n  const trimmed = text.trim();\n  const words = trimmed ? (trimmed.replace(/['\";:,.?\u00BF\\-!\u00A1]+/g, \"\").match(/\\S+/g) || []).length : 0;\n\n  return {\n    paragraphs: trimmed ? (trimmed.match(/\\n+/g) || []).length + 1 : 0,\n    sentences: trimmed ? (trimmed.match(/[.?!\u2026]+./g) || []).length + 1 : 0,\n    words: words,\n    reading_time: Math.ceil(words / 275),\n    speaking_time: Math.ceil(words / 180),\n    characters: includeWhitespace ? decode(text).length : trimmed ? decode(trimmed.replace(/\\s/g, \"\")).length : 0,\n  };\n};\n", "import { Clipboard, Toast, getSelectedText, showToast } from \"@raycast/api\";\n\nexport async function readFromClipboard() {\n  const clipboard = await Clipboard.readText();\n\n  if (!clipboard) return \"\";\n\n  showToast({\n    style: Toast.Style.Success,\n    title: `Text loaded from clipboard`,\n    message: `[\u2318 + E] to reset`,\n  });\n\n  return clipboard.trim();\n}\n\nexport async function readFromSelection() {\n  try {\n    const selectedText = await getSelectedText();\n\n    if (selectedText) {\n      showToast({\n        style: Toast.Style.Success,\n        title: `Text loaded from selected text`,\n        message: `[\u2318 + E] to reset`,\n      });\n\n      return selectedText.trim();\n    }\n  } catch {\n    // ignore error, fallback to an empty string\n  }\n\n  return \"\";\n}\n"],
  "mappings": "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",
  "names": ["count_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "decode", "string", "output", "counter", "length", "value", "extra", "count", "text", "includeWhitespace", "trimmed", "words", "import_api", "readFromClipboard", "clipboard", "readFromSelection", "selectedText", "import_jsx_runtime", "Command", "text", "setText", "includeWhitespace", "setIncludeWhitespace", "result", "setResult", "content", "readFromSelection", "readFromClipboard", "count", "resultStr", "actions"]
}
