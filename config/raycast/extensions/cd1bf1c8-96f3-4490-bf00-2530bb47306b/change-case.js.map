{
  "version": 3,
  "sources": ["../src/change-case.tsx", "../node_modules/change-case/src/index.ts", "../node_modules/sponge-case/src/index.ts", "../node_modules/swap-case/src/index.ts", "../node_modules/title-case/src/index.ts", "../src/types.tsx"],
  "sourcesContent": ["import {\n  Action,\n  ActionPanel,\n  Application,\n  Cache,\n  Clipboard,\n  closeMainWindow,\n  Color,\n  environment,\n  getFrontmostApplication,\n  getPreferenceValues,\n  getSelectedText,\n  Icon,\n  LaunchProps,\n  List,\n  popToRoot,\n  showHUD,\n  showToast,\n  Toast,\n} from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { CaseFunction, CaseType, functions } from \"./types.js\";\n\nclass NoTextError extends Error {\n  constructor() {\n    super(\"No text\");\n    Object.setPrototypeOf(this, NoTextError.prototype);\n  }\n}\n\nasync function getSelection() {\n  try {\n    return await getSelectedText();\n  } catch (error) {\n    return \"\";\n  }\n}\n\nasync function readContent(preferredSource: string) {\n  const clipboard = await Clipboard.readText();\n  const selected = await getSelection();\n\n  if (preferredSource === \"clipboard\") {\n    if (clipboard) return clipboard;\n    if (selected) return selected;\n  } else {\n    if (selected) return selected;\n    if (clipboard) return clipboard;\n  }\n\n  throw new NoTextError();\n}\n\nfunction modifyCasesWrapper(input: string, case_: CaseFunction) {\n  const modifiedArr: string[] = [];\n  const lines = input.split(\"\\n\");\n  for (const line of lines) {\n    modifiedArr.push(case_(line));\n  }\n  return modifiedArr.join(\"\\n\");\n}\n\nconst cache = new Cache();\n\nconst getPinnedCases = (): CaseType[] => {\n  const pinned = cache.get(\"pinned\");\n  return pinned ? JSON.parse(pinned) : [];\n};\n\nconst getRecentCases = (): CaseType[] => {\n  const recent = cache.get(\"recent\");\n  return recent ? JSON.parse(recent) : [];\n};\n\nconst setPinnedCases = (pinned: CaseType[]) => {\n  cache.set(\"pinned\", JSON.stringify(pinned));\n};\n\nconst setRecentCases = (recent: CaseType[]) => {\n  cache.set(\"recent\", JSON.stringify(recent));\n};\n\nexport default function Command(props: LaunchProps) {\n  const preferences = getPreferenceValues();\n  const preferredSource = preferences[\"source\"];\n  const preferredAction = preferences[\"action\"];\n\n  const immediatelyConvertToCase = props.launchContext?.case;\n  if (immediatelyConvertToCase) {\n    (async () => {\n      const content = await readContent(preferredSource);\n      const converted = functions[immediatelyConvertToCase](content);\n\n      if (preferredAction === \"paste\") {\n        Clipboard.paste(converted);\n      } else {\n        Clipboard.copy(converted);\n      }\n\n      showHUD(`Converted to ${immediatelyConvertToCase}`);\n      popToRoot();\n    })();\n    return;\n  }\n\n  const [content, setContent] = useState<string>(\"\");\n  const [frontmostApp, setFrontmostApp] = useState<Application>();\n\n  const [pinned, setPinned] = useState<CaseType[]>([]);\n  const [recent, setRecent] = useState<CaseType[]>([]);\n\n  useEffect(() => {\n    setPinned(getPinnedCases());\n    setRecent(getRecentCases());\n    getFrontmostApplication().then(setFrontmostApp);\n  }, []);\n\n  useEffect(() => {\n    setPinnedCases(pinned);\n  }, [pinned]);\n\n  useEffect(() => {\n    setRecentCases(recent);\n  }, [recent]);\n\n  const refreshContent = async () => {\n    try {\n      setContent(await readContent(preferredSource));\n    } catch (error) {\n      if (error instanceof NoTextError) {\n        showToast({\n          style: Toast.Style.Failure,\n          title: \"Nothing to convert\",\n          message: \"Please ensure that text is either selected or copied\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    refreshContent();\n  }, []);\n\n  const CopyToClipboard = (props: {\n    case: CaseType;\n    modified: string;\n    pinned?: boolean;\n    recent?: boolean;\n  }): JSX.Element => {\n    return (\n      <Action\n        title=\"Copy to Clipboard\"\n        icon={Icon.Clipboard}\n        onAction={() => {\n          if (!props.pinned) {\n            setRecent([props.case, ...recent.filter((c) => c !== props.case)].slice(0, 4));\n          }\n          showHUD(\"Copied to Clipboard\");\n          Clipboard.copy(props.modified);\n          closeMainWindow();\n        }}\n      />\n    );\n  };\n\n  const PasteToActiveApp = (props: {\n    case: CaseType;\n    modified: string;\n    pinned?: boolean;\n    recent?: boolean;\n  }): JSX.Element | null => {\n    return frontmostApp ? (\n      <Action\n        title={`Paste in ${frontmostApp.name}`}\n        icon={{ fileIcon: frontmostApp.path }}\n        onAction={() => {\n          if (!props.pinned) {\n            setRecent([props.case, ...recent.filter((c) => c !== props.case)].slice(0, 4));\n          }\n          showHUD(`Pasted in ${frontmostApp.name}`);\n          Clipboard.paste(props.modified);\n          closeMainWindow();\n        }}\n      />\n    ) : null;\n  };\n\n  const CaseItem = (props: { case: CaseType; modified: string; pinned?: boolean; recent?: boolean }): JSX.Element => {\n    const context = encodeURIComponent(`{\"case\":\"${props.case}\"}`);\n    const deeplink = `raycast://extensions/erics118/${environment.extensionName}/${environment.commandName}?context=${context}`;\n\n    return (\n      <List.Item\n        id={props.case}\n        title={props.case}\n        accessories={[{ text: props.modified }]}\n        detail={<List.Item.Detail markdown={props.modified} />}\n        actions={\n          <ActionPanel>\n            <ActionPanel.Section>\n              {preferredAction === \"paste\" && <PasteToActiveApp {...props} />}\n              <CopyToClipboard {...props} />\n              {preferredAction === \"copy\" && <PasteToActiveApp {...props} />}\n            </ActionPanel.Section>\n            <ActionPanel.Section>\n              {!props.pinned ? (\n                <Action\n                  title=\"Pin Case\"\n                  icon={Icon.Pin}\n                  shortcut={{ key: \"p\", modifiers: [\"cmd\", \"shift\"] }}\n                  onAction={() => {\n                    setPinned([props.case, ...pinned]);\n                    if (props.recent) {\n                      setRecent(recent.filter((c) => c !== props.case));\n                    }\n                  }}\n                />\n              ) : (\n                <>\n                  <Action\n                    title=\"Remove Pinned Case\"\n                    icon={Icon.PinDisabled}\n                    shortcut={{ key: \"r\", modifiers: [\"cmd\"] }}\n                    onAction={() => {\n                      setPinned(pinned.filter((c) => c !== props.case));\n                    }}\n                  />\n                  <Action\n                    title=\"Clear Pinned Cases\"\n                    icon={{ source: Icon.XMarkCircle, tintColor: Color.Red }}\n                    shortcut={{ key: \"r\", modifiers: [\"cmd\", \"shift\"] }}\n                    onAction={() => {\n                      setPinned([]);\n                    }}\n                  />\n                </>\n              )}\n              {props.recent && (\n                <>\n                  <Action\n                    title=\"Remove Recent Case\"\n                    icon={Icon.XMarkCircle}\n                    shortcut={{ key: \"r\", modifiers: [\"cmd\"] }}\n                    onAction={() => {\n                      setRecent(recent.filter((c) => c !== props.case));\n                    }}\n                  />\n                  <Action\n                    title=\"Clear Recent Cases\"\n                    icon={{ source: Icon.XMarkCircle, tintColor: Color.Red }}\n                    shortcut={{ key: \"r\", modifiers: [\"cmd\", \"shift\"] }}\n                    onAction={() => {\n                      setRecent([]);\n                    }}\n                  />\n                </>\n              )}\n              <Action.CreateQuicklink\n                title={`Create Quicklink to Convert to ${props.case}`}\n                quicklink={{ name: `Convert to ${props.case}`, link: deeplink }}\n              />\n            </ActionPanel.Section>\n            <ActionPanel.Section>\n              <Action\n                title=\"Refresh Content\"\n                icon={Icon.RotateAntiClockwise}\n                shortcut={{ key: \"r\", modifiers: [\"cmd\"] }}\n                onAction={refreshContent}\n              />\n            </ActionPanel.Section>\n          </ActionPanel>\n        }\n      />\n    );\n  };\n\n  return (\n    <List isShowingDetail={true}>\n      <List.Section title=\"Pinned\">\n        {pinned?.map((key) => (\n          <CaseItem\n            key={key}\n            case={key as CaseType}\n            modified={modifyCasesWrapper(content, functions[key])}\n            pinned={true}\n          />\n        ))}\n      </List.Section>\n      <List.Section title=\"Recent\">\n        {recent.map((key) => (\n          <CaseItem\n            key={key}\n            case={key as CaseType}\n            modified={modifyCasesWrapper(content, functions[key])}\n            recent={true}\n          />\n        ))}\n      </List.Section>\n      <List.Section title=\"All Cases\">\n        {Object.entries(functions)\n          .filter(\n            ([key]) =>\n              preferences[key.replace(/ +/g, \"\")] &&\n              !recent.includes(key as CaseType) &&\n              !pinned.includes(key as CaseType),\n          )\n          .map(([key, func]) => (\n            <CaseItem key={key} case={key as CaseType} modified={modifyCasesWrapper(content, func)} />\n          ))}\n      </List.Section>\n    </List>\n  );\n}\n", "// Regexps involved with splitting words in various case formats.\nconst SPLIT_LOWER_UPPER_RE = /([\\p{Ll}\\d])(\\p{Lu})/gu;\nconst SPLIT_UPPER_UPPER_RE = /(\\p{Lu})([\\p{Lu}][\\p{Ll}])/gu;\n\n// Used to iterate over the initial split result and separate numbers.\nconst SPLIT_SEPARATE_NUMBER_RE = /(\\d)\\p{Ll}|(\\p{L})\\d/u;\n\n// Regexp involved with stripping non-word characters from the result.\nconst DEFAULT_STRIP_REGEXP = /[^\\p{L}\\d]+/giu;\n\n// The replacement value for splits.\nconst SPLIT_REPLACE_VALUE = \"$1\\0$2\";\n\n// The default characters to keep after transforming case.\nconst DEFAULT_PREFIX_SUFFIX_CHARACTERS = \"\";\n\n/**\n * Supported locale values. Use `false` to ignore locale.\n * Defaults to `undefined`, which uses the host environment.\n */\nexport type Locale = string[] | string | false | undefined;\n\n/**\n * Options used for converting strings to pascal/camel case.\n */\nexport interface PascalCaseOptions extends Options {\n  mergeAmbiguousCharacters?: boolean;\n}\n\n/**\n * Options used for converting strings to any case.\n */\nexport interface Options {\n  locale?: Locale;\n  split?: (value: string) => string[];\n  /** @deprecated Pass `split: splitSeparateNumbers` instead. */\n  separateNumbers?: boolean;\n  delimiter?: string;\n  prefixCharacters?: string;\n  suffixCharacters?: string;\n}\n\n/**\n * Split any cased input strings into an array of words.\n */\nexport function split(value: string) {\n  let result = value.trim();\n\n  result = result\n    .replace(SPLIT_LOWER_UPPER_RE, SPLIT_REPLACE_VALUE)\n    .replace(SPLIT_UPPER_UPPER_RE, SPLIT_REPLACE_VALUE);\n\n  result = result.replace(DEFAULT_STRIP_REGEXP, \"\\0\");\n\n  let start = 0;\n  let end = result.length;\n\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  if (start === end) return [];\n  while (result.charAt(end - 1) === \"\\0\") end--;\n\n  return result.slice(start, end).split(/\\0/g);\n}\n\n/**\n * Split the input string into an array of words, separating numbers.\n */\nexport function splitSeparateNumbers(value: string) {\n  const words = split(value);\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const match = SPLIT_SEPARATE_NUMBER_RE.exec(word);\n    if (match) {\n      const offset = match.index + (match[1] ?? match[2]).length;\n      words.splice(i, 1, word.slice(0, offset), word.slice(offset));\n    }\n  }\n  return words;\n}\n\n/**\n * Convert a string to space separated lower case (`foo bar`).\n */\nexport function noCase(input: string, options?: Options) {\n  const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n  return (\n    prefix +\n    words.map(lowerFactory(options?.locale)).join(options?.delimiter ?? \" \") +\n    suffix\n  );\n}\n\n/**\n * Convert a string to camel case (`fooBar`).\n */\nexport function camelCase(input: string, options?: PascalCaseOptions) {\n  const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n  const lower = lowerFactory(options?.locale);\n  const upper = upperFactory(options?.locale);\n  const transform = options?.mergeAmbiguousCharacters\n    ? capitalCaseTransformFactory(lower, upper)\n    : pascalCaseTransformFactory(lower, upper);\n  return (\n    prefix +\n    words\n      .map((word, index) => {\n        if (index === 0) return lower(word);\n        return transform(word, index);\n      })\n      .join(options?.delimiter ?? \"\") +\n    suffix\n  );\n}\n\n/**\n * Convert a string to pascal case (`FooBar`).\n */\nexport function pascalCase(input: string, options?: PascalCaseOptions) {\n  const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n  const lower = lowerFactory(options?.locale);\n  const upper = upperFactory(options?.locale);\n  const transform = options?.mergeAmbiguousCharacters\n    ? capitalCaseTransformFactory(lower, upper)\n    : pascalCaseTransformFactory(lower, upper);\n  return prefix + words.map(transform).join(options?.delimiter ?? \"\") + suffix;\n}\n\n/**\n * Convert a string to pascal snake case (`Foo_Bar`).\n */\nexport function pascalSnakeCase(input: string, options?: Options) {\n  return capitalCase(input, { delimiter: \"_\", ...options });\n}\n\n/**\n * Convert a string to capital case (`Foo Bar`).\n */\nexport function capitalCase(input: string, options?: Options) {\n  const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n  const lower = lowerFactory(options?.locale);\n  const upper = upperFactory(options?.locale);\n  return (\n    prefix +\n    words\n      .map(capitalCaseTransformFactory(lower, upper))\n      .join(options?.delimiter ?? \" \") +\n    suffix\n  );\n}\n\n/**\n * Convert a string to constant case (`FOO_BAR`).\n */\nexport function constantCase(input: string, options?: Options) {\n  const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n  return (\n    prefix +\n    words.map(upperFactory(options?.locale)).join(options?.delimiter ?? \"_\") +\n    suffix\n  );\n}\n\n/**\n * Convert a string to dot case (`foo.bar`).\n */\nexport function dotCase(input: string, options?: Options) {\n  return noCase(input, { delimiter: \".\", ...options });\n}\n\n/**\n * Convert a string to kebab case (`foo-bar`).\n */\nexport function kebabCase(input: string, options?: Options) {\n  return noCase(input, { delimiter: \"-\", ...options });\n}\n\n/**\n * Convert a string to path case (`foo/bar`).\n */\nexport function pathCase(input: string, options?: Options) {\n  return noCase(input, { delimiter: \"/\", ...options });\n}\n\n/**\n * Convert a string to path case (`Foo bar`).\n */\nexport function sentenceCase(input: string, options?: Options) {\n  const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n  const lower = lowerFactory(options?.locale);\n  const upper = upperFactory(options?.locale);\n  const transform = capitalCaseTransformFactory(lower, upper);\n  return (\n    prefix +\n    words\n      .map((word, index) => {\n        if (index === 0) return transform(word);\n        return lower(word);\n      })\n      .join(options?.delimiter ?? \" \") +\n    suffix\n  );\n}\n\n/**\n * Convert a string to snake case (`foo_bar`).\n */\nexport function snakeCase(input: string, options?: Options) {\n  return noCase(input, { delimiter: \"_\", ...options });\n}\n\n/**\n * Convert a string to header case (`Foo-Bar`).\n */\nexport function trainCase(input: string, options?: Options) {\n  return capitalCase(input, { delimiter: \"-\", ...options });\n}\n\nfunction lowerFactory(locale: Locale): (input: string) => string {\n  return locale === false\n    ? (input: string) => input.toLowerCase()\n    : (input: string) => input.toLocaleLowerCase(locale);\n}\n\nfunction upperFactory(locale: Locale): (input: string) => string {\n  return locale === false\n    ? (input: string) => input.toUpperCase()\n    : (input: string) => input.toLocaleUpperCase(locale);\n}\n\nfunction capitalCaseTransformFactory(\n  lower: (input: string) => string,\n  upper: (input: string) => string,\n) {\n  return (word: string) => `${upper(word[0])}${lower(word.slice(1))}`;\n}\n\nfunction pascalCaseTransformFactory(\n  lower: (input: string) => string,\n  upper: (input: string) => string,\n) {\n  return (word: string, index: number) => {\n    const char0 = word[0];\n    const initial =\n      index > 0 && char0 >= \"0\" && char0 <= \"9\" ? \"_\" + char0 : upper(char0);\n    return initial + lower(word.slice(1));\n  };\n}\n\nfunction splitPrefixSuffix(\n  input: string,\n  options: Options = {},\n): [string, string[], string] {\n  const splitFn =\n    options.split ?? (options.separateNumbers ? splitSeparateNumbers : split);\n  const prefixCharacters =\n    options.prefixCharacters ?? DEFAULT_PREFIX_SUFFIX_CHARACTERS;\n  const suffixCharacters =\n    options.suffixCharacters ?? DEFAULT_PREFIX_SUFFIX_CHARACTERS;\n  let prefixIndex = 0;\n  let suffixIndex = input.length;\n\n  while (prefixIndex < input.length) {\n    const char = input.charAt(prefixIndex);\n    if (!prefixCharacters.includes(char)) break;\n    prefixIndex++;\n  }\n\n  while (suffixIndex > prefixIndex) {\n    const index = suffixIndex - 1;\n    const char = input.charAt(index);\n    if (!suffixCharacters.includes(char)) break;\n    suffixIndex = index;\n  }\n\n  return [\n    input.slice(0, prefixIndex),\n    splitFn(input.slice(prefixIndex, suffixIndex)),\n    input.slice(suffixIndex),\n  ];\n}\n", "export function spongeCase(input: string, locale?: string[] | string): string {\n  let result = \"\";\n  for (const char of input) {\n    result +=\n      Math.random() > 0.5\n        ? char.toLocaleUpperCase(locale)\n        : char.toLocaleLowerCase(locale);\n  }\n  return result;\n}\n", "export function swapCase(input: string, locale?: string[] | string) {\n  let result = \"\";\n  for (const char of input) {\n    const lower = char.toLocaleLowerCase(locale);\n    result += char === lower ? char.toLocaleUpperCase(locale) : lower;\n  }\n  return result;\n}\n", "const TOKENS = /(\\S+)|(.)/g;\nconst IS_SPECIAL_CASE = /[\\.#]\\p{Alphabetic}/u; // #tag, example.com, etc.\nconst IS_MANUAL_CASE = /\\p{Ll}(?=[\\p{Lu}])/u; // iPhone, iOS, etc.\nconst ALPHANUMERIC_PATTERN = /\\p{Alphabetic}+/gu;\nconst IS_ACRONYM =\n  /^(\\P{Alphabetic})*(?:\\p{Alphabetic}\\.){2,}(\\P{Alphabetic})*$/u;\n\nexport const WORD_SEPARATORS = new Set([\"—\", \"–\", \"-\", \"―\", \"/\"]);\n\nexport const SENTENCE_TERMINATORS = new Set([\".\", \"!\", \"?\"]);\n\nexport const TITLE_TERMINATORS = new Set([\n  ...SENTENCE_TERMINATORS,\n  \":\",\n  '\"',\n  \"'\",\n  \"”\",\n]);\n\nexport const SMALL_WORDS = new Set([\n  \"a\",\n  \"an\",\n  \"and\",\n  \"as\",\n  \"at\",\n  \"because\",\n  \"but\",\n  \"by\",\n  \"en\",\n  \"for\",\n  \"if\",\n  \"in\",\n  \"neither\",\n  \"nor\",\n  \"of\",\n  \"on\",\n  \"only\",\n  \"or\",\n  \"over\",\n  \"per\",\n  \"so\",\n  \"some\",\n  \"than\",\n  \"that\",\n  \"the\",\n  \"to\",\n  \"up\",\n  \"upon\",\n  \"v\",\n  \"versus\",\n  \"via\",\n  \"vs\",\n  \"when\",\n  \"with\",\n  \"without\",\n  \"yet\",\n]);\n\nexport interface Options {\n  locale?: string | string[];\n  sentenceCase?: boolean;\n  sentenceTerminators?: Set<string>;\n  smallWords?: Set<string>;\n  titleTerminators?: Set<string>;\n  wordSeparators?: Set<string>;\n}\n\nexport function titleCase(\n  input: string,\n  options: Options | string[] | string = {},\n) {\n  const {\n    locale = undefined,\n    sentenceCase = false,\n    sentenceTerminators = SENTENCE_TERMINATORS,\n    titleTerminators = TITLE_TERMINATORS,\n    smallWords = SMALL_WORDS,\n    wordSeparators = WORD_SEPARATORS,\n  } = typeof options === \"string\" || Array.isArray(options)\n    ? { locale: options }\n    : options;\n\n  const terminators = sentenceCase ? sentenceTerminators : titleTerminators;\n  let result = \"\";\n  let isNewSentence = true;\n\n  // tslint:disable-next-line\n  for (const m of input.matchAll(TOKENS)) {\n    const { 1: token, 2: whiteSpace, index = 0 } = m;\n\n    if (whiteSpace) {\n      result += whiteSpace;\n      continue;\n    }\n\n    // Ignore URLs, email addresses, acronyms, etc.\n    if (IS_SPECIAL_CASE.test(token)) {\n      const acronym = token.match(IS_ACRONYM);\n\n      // The period at the end of an acronym is not a new sentence,\n      // but we should uppercase first for i.e., e.g., etc.\n      if (acronym) {\n        const [_, prefix = \"\", suffix = \"\"] = acronym;\n        result +=\n          sentenceCase && !isNewSentence\n            ? token\n            : upperAt(token, prefix.length, locale);\n        isNewSentence = terminators.has(suffix.charAt(0));\n        continue;\n      }\n\n      result += token;\n      isNewSentence = terminators.has(token.charAt(token.length - 1));\n    } else {\n      const matches = Array.from(token.matchAll(ALPHANUMERIC_PATTERN));\n      let value = token;\n      let isSentenceEnd = false;\n\n      for (let i = 0; i < matches.length; i++) {\n        const { 0: word, index: wordIndex = 0 } = matches[i];\n        const nextChar = token.charAt(wordIndex + word.length);\n\n        isSentenceEnd = terminators.has(nextChar);\n\n        // Always the capitalize first word and reset \"new sentence\".\n        if (isNewSentence) {\n          isNewSentence = false;\n        }\n        // Skip capitalizing all words if sentence case is enabled.\n        else if (sentenceCase || IS_MANUAL_CASE.test(word)) {\n          continue;\n        }\n        // Handle simple words.\n        else if (matches.length === 1) {\n          // Avoid capitalizing small words, except at the end of a sentence.\n          if (smallWords.has(word)) {\n            const isFinalToken = index + token.length === input.length;\n\n            if (!isFinalToken && !isSentenceEnd) {\n              continue;\n            }\n          }\n        }\n        // Multi-word tokens need to be parsed differently.\n        else if (i > 0) {\n          // Avoid capitalizing words without a valid word separator,\n          // e.g. \"apple's\" or \"test(ing)\".\n          if (!wordSeparators.has(token.charAt(wordIndex - 1))) {\n            continue;\n          }\n\n          // Ignore small words in the middle of hyphenated words.\n          if (smallWords.has(word) && wordSeparators.has(nextChar)) {\n            continue;\n          }\n        }\n\n        value = upperAt(value, wordIndex, locale);\n      }\n\n      result += value;\n      isNewSentence =\n        isSentenceEnd || terminators.has(token.charAt(token.length - 1));\n    }\n  }\n\n  return result;\n}\n\nfunction upperAt(\n  input: string,\n  index: number,\n  locale: string | string[] | undefined,\n) {\n  return (\n    input.slice(0, index) +\n    input.charAt(index).toLocaleUpperCase(locale) +\n    input.slice(index + 1)\n  );\n}\n", "import * as changeCase from \"change-case\";\nimport { spongeCase } from \"sponge-case\";\nimport { swapCase } from \"swap-case\";\nimport { titleCase } from \"title-case\";\n\nexport type CaseFunction = (input: string) => string;\nexport type CaseFunctions = Record<string, CaseFunction>;\n\nconst lowerCase = (input: string) => input.toLowerCase();\n\nconst lowerFirst = (input: string) => {\n  if (input.length <= 1) {\n    return input.toLowerCase();\n  }\n  return input[0].toLowerCase() + input.slice(1);\n};\n\nconst sentenceCase = (input: string) => titleCase(input, { sentenceCase: true });\n\nconst upperCase = (input: string) => input.toUpperCase();\n\nconst upperFirst = (input: string) => {\n  if (input.length <= 1) {\n    return input.toUpperCase();\n  }\n  return input[0].toUpperCase() + input.slice(1);\n};\n\nexport const functions: CaseFunctions = {\n  \"Camel Case\": changeCase.camelCase,\n  \"Capital Case\": changeCase.capitalCase,\n  \"Constant Case\": changeCase.constantCase,\n  \"Dot Case\": changeCase.dotCase,\n  \"Header Case\": changeCase.trainCase, // see Train Case\n  \"Kebab Case\": changeCase.kebabCase,\n  \"Lower Case\": lowerCase,\n  \"Lower First\": lowerFirst,\n  \"Macro Case\": changeCase.constantCase, // see Constant Case\n  \"No Case\": changeCase.noCase,\n  \"Param Case\": changeCase.kebabCase, // see Kebab Case\n  \"Pascal Case\": changeCase.pascalCase,\n  \"Pascal Snake Case\": changeCase.pascalSnakeCase,\n  \"Path Case\": changeCase.pathCase,\n  \"Random Case\": spongeCase,\n  \"Sentence Case\": sentenceCase,\n  \"Snake Case\": changeCase.snakeCase,\n  \"Swap Case\": swapCase,\n  \"Title Case\": titleCase,\n  \"Upper Case\": upperCase,\n  \"Upper First\": upperFirst,\n  \"Sponge Case\": spongeCase, // see Random Case\n  \"Train Case\": changeCase.trainCase,\n};\n\nexport const cases = Object.keys(functions);\nexport type CaseType = (typeof cases)[number];\n"],
  "mappings": "mbAAA,IAAAA,GAAA,GAAAC,GAAAD,GAAA,aAAAE,KAAA,eAAAC,GAAAH,IAAA,IAAAI,EAmBO,wBACPC,EAAoC,iBCnBpC,IAAMC,GAAuB,yBACvBC,GAAuB,+BAGvBC,GAA2B,wBAG3BC,GAAuB,iBAGvBC,EAAsB,SAGtBC,EAAmC,GA+BnC,SAAUC,EAAMC,EAAa,CACjC,IAAIC,EAASD,EAAM,KAAI,EAEvBC,EAASA,EACN,QAAQR,GAAsBI,CAAmB,EACjD,QAAQH,GAAsBG,CAAmB,EAEpDI,EAASA,EAAO,QAAQL,GAAsB,IAAI,EAElD,IAAIM,EAAQ,EACRC,EAAMF,EAAO,OAGjB,KAAOA,EAAO,OAAOC,CAAK,IAAM,MAAMA,IACtC,GAAIA,IAAUC,EAAK,MAAO,CAAA,EAC1B,KAAOF,EAAO,OAAOE,EAAM,CAAC,IAAM,MAAMA,IAExC,OAAOF,EAAO,MAAMC,EAAOC,CAAG,EAAE,MAAM,KAAK,CAC7C,CAKM,SAAUC,GAAqBJ,EAAa,CAChD,IAAMK,EAAQN,EAAMC,CAAK,EACzB,QAASM,EAAI,EAAGA,EAAID,EAAM,OAAQC,IAAK,CACrC,IAAMC,EAAOF,EAAMC,CAAC,EACdE,EAAQb,GAAyB,KAAKY,CAAI,EAChD,GAAIC,EAAO,CACT,IAAMC,EAASD,EAAM,OAASA,EAAM,CAAC,GAAKA,EAAM,CAAC,GAAG,OACpDH,EAAM,OAAOC,EAAG,EAAGC,EAAK,MAAM,EAAGE,CAAM,EAAGF,EAAK,MAAME,CAAM,CAAC,GAGhE,OAAOJ,CACT,CAKM,SAAUK,EAAOC,EAAeC,EAAiB,CACrD,GAAM,CAACC,EAAQR,EAAOS,CAAM,EAAIC,EAAkBJ,EAAOC,CAAO,EAChE,OACEC,EACAR,EAAM,IAAIW,EAAaJ,GAAS,MAAM,CAAC,EAAE,KAAKA,GAAS,WAAa,GAAG,EACvEE,CAEJ,CAKM,SAAUG,EAAUN,EAAeC,EAA2B,CAClE,GAAM,CAACC,EAAQR,EAAOS,CAAM,EAAIC,EAAkBJ,EAAOC,CAAO,EAC1DM,EAAQF,EAAaJ,GAAS,MAAM,EACpCO,EAAQC,EAAaR,GAAS,MAAM,EACpCS,EAAYT,GAAS,yBACvBU,EAA4BJ,EAAOC,CAAK,EACxCI,EAA2BL,EAAOC,CAAK,EAC3C,OACEN,EACAR,EACG,IAAI,CAACE,EAAMiB,IACNA,IAAU,EAAUN,EAAMX,CAAI,EAC3Bc,EAAUd,EAAMiB,CAAK,CAC7B,EACA,KAAKZ,GAAS,WAAa,EAAE,EAChCE,CAEJ,CAKM,SAAUW,EAAWd,EAAeC,EAA2B,CACnE,GAAM,CAACC,EAAQR,EAAOS,CAAM,EAAIC,EAAkBJ,EAAOC,CAAO,EAC1DM,EAAQF,EAAaJ,GAAS,MAAM,EACpCO,EAAQC,EAAaR,GAAS,MAAM,EACpCS,EAAYT,GAAS,yBACvBU,EAA4BJ,EAAOC,CAAK,EACxCI,EAA2BL,EAAOC,CAAK,EAC3C,OAAON,EAASR,EAAM,IAAIgB,CAAS,EAAE,KAAKT,GAAS,WAAa,EAAE,EAAIE,CACxE,CAKM,SAAUY,EAAgBf,EAAeC,EAAiB,CAC9D,OAAOe,EAAYhB,EAAO,CAAE,UAAW,IAAK,GAAGC,CAAO,CAAE,CAC1D,CAKM,SAAUe,EAAYhB,EAAeC,EAAiB,CAC1D,GAAM,CAACC,EAAQR,EAAOS,CAAM,EAAIC,EAAkBJ,EAAOC,CAAO,EAC1DM,EAAQF,EAAaJ,GAAS,MAAM,EACpCO,EAAQC,EAAaR,GAAS,MAAM,EAC1C,OACEC,EACAR,EACG,IAAIiB,EAA4BJ,EAAOC,CAAK,CAAC,EAC7C,KAAKP,GAAS,WAAa,GAAG,EACjCE,CAEJ,CAKM,SAAUc,EAAajB,EAAeC,EAAiB,CAC3D,GAAM,CAACC,EAAQR,EAAOS,CAAM,EAAIC,EAAkBJ,EAAOC,CAAO,EAChE,OACEC,EACAR,EAAM,IAAIe,EAAaR,GAAS,MAAM,CAAC,EAAE,KAAKA,GAAS,WAAa,GAAG,EACvEE,CAEJ,CAKM,SAAUe,EAAQlB,EAAeC,EAAiB,CACtD,OAAOF,EAAOC,EAAO,CAAE,UAAW,IAAK,GAAGC,CAAO,CAAE,CACrD,CAKM,SAAUkB,EAAUnB,EAAeC,EAAiB,CACxD,OAAOF,EAAOC,EAAO,CAAE,UAAW,IAAK,GAAGC,CAAO,CAAE,CACrD,CAKM,SAAUmB,EAASpB,EAAeC,EAAiB,CACvD,OAAOF,EAAOC,EAAO,CAAE,UAAW,IAAK,GAAGC,CAAO,CAAE,CACrD,CAyBM,SAAUoB,EAAUC,EAAeC,EAAiB,CACxD,OAAOC,EAAOF,EAAO,CAAE,UAAW,IAAK,GAAGC,CAAO,CAAE,CACrD,CAKM,SAAUE,EAAUH,EAAeC,EAAiB,CACxD,OAAOG,EAAYJ,EAAO,CAAE,UAAW,IAAK,GAAGC,CAAO,CAAE,CAC1D,CAEA,SAASI,EAAaC,EAAc,CAClC,OAAOA,IAAW,GACbN,GAAkBA,EAAM,YAAW,EACnCA,GAAkBA,EAAM,kBAAkBM,CAAM,CACvD,CAEA,SAASC,EAAaD,EAAc,CAClC,OAAOA,IAAW,GACbN,GAAkBA,EAAM,YAAW,EACnCA,GAAkBA,EAAM,kBAAkBM,CAAM,CACvD,CAEA,SAASE,EACPC,EACAC,EAAgC,CAEhC,OAAQC,GAAiB,GAAGD,EAAMC,EAAK,CAAC,CAAC,IAAIF,EAAME,EAAK,MAAM,CAAC,CAAC,GAClE,CAEA,SAASC,EACPH,EACAC,EAAgC,CAEhC,MAAO,CAACC,EAAcE,IAAiB,CACrC,IAAMC,EAAQH,EAAK,CAAC,EAGpB,OADEE,EAAQ,GAAKC,GAAS,KAAOA,GAAS,IAAM,IAAMA,EAAQJ,EAAMI,CAAK,GACtDL,EAAME,EAAK,MAAM,CAAC,CAAC,CACtC,CACF,CAEA,SAASI,EACPf,EACAC,EAAmB,CAAA,EAAE,CAErB,IAAMe,EACJf,EAAQ,QAAUA,EAAQ,gBAAkBgB,GAAuBC,GAC/DC,EACJlB,EAAQ,kBAAoBmB,EACxBC,EACJpB,EAAQ,kBAAoBmB,EAC1BE,EAAc,EACdC,EAAcvB,EAAM,OAExB,KAAOsB,EAActB,EAAM,QAAQ,CACjC,IAAMwB,EAAOxB,EAAM,OAAOsB,CAAW,EACrC,GAAI,CAACH,EAAiB,SAASK,CAAI,EAAG,MACtCF,IAGF,KAAOC,EAAcD,GAAa,CAChC,IAAMT,EAAQU,EAAc,EACtBC,EAAOxB,EAAM,OAAOa,CAAK,EAC/B,GAAI,CAACQ,EAAiB,SAASG,CAAI,EAAG,MACtCD,EAAcV,EAGhB,MAAO,CACLb,EAAM,MAAM,EAAGsB,CAAW,EAC1BN,EAAQhB,EAAM,MAAMsB,EAAaC,CAAW,CAAC,EAC7CvB,EAAM,MAAMuB,CAAW,EAE3B,CCxRM,SAAUE,EAAWC,EAAeC,EAA0B,CAClE,IAAIC,EAAS,GACb,QAAWC,KAAQH,EACjBE,GACE,KAAK,OAAM,EAAK,GACZC,EAAK,kBAAkBF,CAAM,EAC7BE,EAAK,kBAAkBF,CAAM,EAErC,OAAOC,CACT,CCTM,SAAUE,EAASC,EAAeC,EAA0B,CAChE,IAAIC,EAAS,GACb,QAAWC,KAAQH,EAAO,CACxB,IAAMI,EAAQD,EAAK,kBAAkBF,CAAM,EAC3CC,GAAUC,IAASC,EAAQD,EAAK,kBAAkBF,CAAM,EAAIG,EAE9D,OAAOF,CACT,CCPA,IAAMG,GAAS,aACTC,GAAkB,uBAClBC,GAAiB,sBACjBC,GAAuB,oBACvBC,GACJ,gEAEWC,GAAkB,IAAI,IAAI,CAAC,SAAK,SAAK,IAAK,SAAK,GAAG,CAAC,EAEnDC,EAAuB,IAAI,IAAI,CAAC,IAAK,IAAK,GAAG,CAAC,EAE9CC,GAAoB,IAAI,IAAI,CACvC,GAAGD,EACH,IACA,IACA,IACA,SACD,EAEYE,GAAc,IAAI,IAAI,CACjC,IACA,KACA,MACA,KACA,KACA,UACA,MACA,KACA,KACA,MACA,KACA,KACA,UACA,MACA,KACA,KACA,OACA,KACA,OACA,MACA,KACA,OACA,OACA,OACA,MACA,KACA,KACA,OACA,IACA,SACA,MACA,KACA,OACA,OACA,UACA,MACD,EAWK,SAAUC,EACdC,EACAC,EAAuC,CAAA,EAAE,CAEzC,GAAM,CACJ,OAAAC,EAAS,OACT,aAAAC,EAAe,GACf,oBAAAC,EAAsBR,EACtB,iBAAAS,EAAmBR,GACnB,WAAAS,EAAaR,GACb,eAAAS,EAAiBZ,EAAe,EAC9B,OAAOM,GAAY,UAAY,MAAM,QAAQA,CAAO,EACpD,CAAE,OAAQA,CAAO,EACjBA,EAEEO,EAAcL,EAAeC,EAAsBC,EACrDI,EAAS,GACTC,EAAgB,GAGpB,QAAWC,KAAKX,EAAM,SAASV,EAAM,EAAG,CACtC,GAAM,CAAE,EAAGsB,EAAO,EAAGC,EAAY,MAAAC,EAAQ,CAAC,EAAKH,EAE/C,GAAIE,EAAY,CACdJ,GAAUI,EACV,SAIF,GAAItB,GAAgB,KAAKqB,CAAK,EAAG,CAC/B,IAAMG,EAAUH,EAAM,MAAMlB,EAAU,EAItC,GAAIqB,EAAS,CACX,GAAM,CAACC,EAAGC,EAAS,GAAIC,EAAS,EAAE,EAAIH,EACtCN,GACEN,GAAgB,CAACO,EACbE,EACAO,EAAQP,EAAOK,EAAO,OAAQf,CAAM,EAC1CQ,EAAgBF,EAAY,IAAIU,EAAO,OAAO,CAAC,CAAC,EAChD,SAGFT,GAAUG,EACVF,EAAgBF,EAAY,IAAII,EAAM,OAAOA,EAAM,OAAS,CAAC,CAAC,MACzD,CACL,IAAMQ,EAAU,MAAM,KAAKR,EAAM,SAASnB,EAAoB,CAAC,EAC3D4B,EAAQT,EACRU,EAAgB,GAEpB,QAASC,EAAI,EAAGA,EAAIH,EAAQ,OAAQG,IAAK,CACvC,GAAM,CAAE,EAAGC,EAAM,MAAOC,EAAY,CAAC,EAAKL,EAAQG,CAAC,EAC7CG,EAAWd,EAAM,OAAOa,EAAYD,EAAK,MAAM,EAKrD,GAHAF,EAAgBd,EAAY,IAAIkB,CAAQ,EAGpChB,EACFA,EAAgB,OAGb,IAAIP,GAAgBX,GAAe,KAAKgC,CAAI,EAC/C,SAGG,GAAIJ,EAAQ,SAAW,GAE1B,GAAId,EAAW,IAAIkB,CAAI,GAGjB,EAFiBV,EAAQF,EAAM,SAAWZ,EAAM,SAE/B,CAACsB,EACpB,iBAKGC,EAAI,IAGP,CAAChB,EAAe,IAAIK,EAAM,OAAOa,EAAY,CAAC,CAAC,GAK/CnB,EAAW,IAAIkB,CAAI,GAAKjB,EAAe,IAAImB,CAAQ,GACrD,SAIJL,EAAQF,EAAQE,EAAOI,EAAWvB,CAAM,EAG1CO,GAAUY,EACVX,EACEY,GAAiBd,EAAY,IAAII,EAAM,OAAOA,EAAM,OAAS,CAAC,CAAC,GAIrE,OAAOH,CACT,CAEA,SAASU,EACPnB,EACAc,EACAZ,EAAqC,CAErC,OACEF,EAAM,MAAM,EAAGc,CAAK,EACpBd,EAAM,OAAOc,CAAK,EAAE,kBAAkBZ,CAAM,EAC5CF,EAAM,MAAMc,EAAQ,CAAC,CAEzB,CC3KA,IAAMa,GAAaC,GAAkBA,EAAM,YAAY,EAEjDC,GAAcD,GACdA,EAAM,QAAU,EACXA,EAAM,YAAY,EAEpBA,EAAM,CAAC,EAAE,YAAY,EAAIA,EAAM,MAAM,CAAC,EAGzCE,GAAgBF,GAAkBG,EAAUH,EAAO,CAAE,aAAc,EAAK,CAAC,EAEzEI,GAAaJ,GAAkBA,EAAM,YAAY,EAEjDK,GAAcL,GACdA,EAAM,QAAU,EACXA,EAAM,YAAY,EAEpBA,EAAM,CAAC,EAAE,YAAY,EAAIA,EAAM,MAAM,CAAC,EAGlCM,EAA2B,CACtC,aAAyBC,EACzB,eAA2BC,EAC3B,gBAA4BC,EAC5B,WAAuBC,EACvB,cAA0BC,EAC1B,aAAyBC,EACzB,aAAcb,GACd,cAAeE,GACf,aAAyBQ,EACzB,UAAsBI,EACtB,aAAyBD,EACzB,cAA0BE,EAC1B,oBAAgCC,EAChC,YAAwBC,EACxB,cAAeC,EACf,gBAAiBf,GACjB,aAAyBgB,EACzB,YAAaC,EACb,aAAchB,EACd,aAAcC,GACd,cAAeC,GACf,cAAeY,EACf,aAAyBN,CAC3B,EAEaS,GAAQ,OAAO,KAAKd,CAAS,ELgGpC,IAAAe,EAAA,6BA/HAC,EAAN,cAA0B,KAAM,CAC9B,aAAc,CACZ,MAAM,SAAS,EACf,OAAO,eAAe,KAAMA,EAAY,SAAS,CACnD,CACF,EAEA,eAAeC,IAAe,CAC5B,GAAI,CACF,OAAO,QAAM,mBAAgB,CAC/B,MAAE,CACA,MAAO,EACT,CACF,CAEA,eAAeC,GAAYC,EAAyB,CAClD,IAAMC,EAAY,MAAM,YAAU,SAAS,EACrCC,EAAW,MAAMJ,GAAa,EAEpC,GAAIE,IAAoB,YAAa,CACnC,GAAIC,EAAW,OAAOA,EACtB,GAAIC,EAAU,OAAOA,MAChB,CACL,GAAIA,EAAU,OAAOA,EACrB,GAAID,EAAW,OAAOA,EAGxB,MAAM,IAAIJ,CACZ,CAEA,SAASM,EAAmBC,EAAeC,EAAqB,CAC9D,IAAMC,EAAwB,CAAC,EACzBC,EAAQH,EAAM,MAAM;AAAA,CAAI,EAC9B,QAAWI,KAAQD,EACjBD,EAAY,KAAKD,EAAMG,CAAI,CAAC,EAE9B,OAAOF,EAAY,KAAK;AAAA,CAAI,CAC9B,CAEA,IAAMG,EAAQ,IAAI,QAEZC,GAAiB,IAAkB,CACvC,IAAMC,EAASF,EAAM,IAAI,QAAQ,EACjC,OAAOE,EAAS,KAAK,MAAMA,CAAM,EAAI,CAAC,CACxC,EAEMC,GAAiB,IAAkB,CACvC,IAAMC,EAASJ,EAAM,IAAI,QAAQ,EACjC,OAAOI,EAAS,KAAK,MAAMA,CAAM,EAAI,CAAC,CACxC,EAEMC,GAAkBH,GAAuB,CAC7CF,EAAM,IAAI,SAAU,KAAK,UAAUE,CAAM,CAAC,CAC5C,EAEMI,GAAkBF,GAAuB,CAC7CJ,EAAM,IAAI,SAAU,KAAK,UAAUI,CAAM,CAAC,CAC5C,EAEe,SAARG,GAAyBC,EAAoB,CAClD,IAAMC,KAAc,uBAAoB,EAClClB,EAAkBkB,EAAY,OAC9BC,EAAkBD,EAAY,OAE9BE,EAA2BH,EAAM,eAAe,KACtD,GAAIG,EAA0B,EAC3B,SAAY,CACX,IAAMC,EAAU,MAAMtB,GAAYC,CAAe,EAC3CsB,EAAYC,EAAUH,CAAwB,EAAEC,CAAO,EAEzDF,IAAoB,QACtB,YAAU,MAAMG,CAAS,EAEzB,YAAU,KAAKA,CAAS,KAG1B,WAAQ,gBAAgBF,GAA0B,KAClD,aAAU,CACZ,GAAG,EACH,OAGF,GAAM,CAACC,EAASG,CAAU,KAAI,YAAiB,EAAE,EAC3C,CAACC,EAAcC,CAAe,KAAI,YAAsB,EAExD,CAACf,EAAQgB,CAAS,KAAI,YAAqB,CAAC,CAAC,EAC7C,CAACd,EAAQe,CAAS,KAAI,YAAqB,CAAC,CAAC,KAEnD,aAAU,IAAM,CACdD,EAAUjB,GAAe,CAAC,EAC1BkB,EAAUhB,GAAe,CAAC,KAC1B,2BAAwB,EAAE,KAAKc,CAAe,CAChD,EAAG,CAAC,CAAC,KAEL,aAAU,IAAM,CACdZ,GAAeH,CAAM,CACvB,EAAG,CAACA,CAAM,CAAC,KAEX,aAAU,IAAM,CACdI,GAAeF,CAAM,CACvB,EAAG,CAACA,CAAM,CAAC,EAEX,IAAMgB,EAAiB,SAAY,CACjC,GAAI,CACFL,EAAW,MAAMzB,GAAYC,CAAe,CAAC,CAC/C,OAAS8B,EAAP,CACIA,aAAiBjC,MACnB,aAAU,CACR,MAAO,QAAM,MAAM,QACnB,MAAO,qBACP,QAAS,sDACX,CAAC,CAEL,CACF,KAEA,aAAU,IAAM,CACdgC,EAAe,CACjB,EAAG,CAAC,CAAC,EAEL,IAAME,EAAmBd,MAOrB,OAAC,UACC,MAAM,oBACN,KAAM,OAAK,UACX,SAAU,IAAM,CACTA,EAAM,QACTW,EAAU,CAACX,EAAM,KAAM,GAAGJ,EAAO,OAAQmB,GAAMA,IAAMf,EAAM,IAAI,CAAC,EAAE,MAAM,EAAG,CAAC,CAAC,KAE/E,WAAQ,qBAAqB,EAC7B,YAAU,KAAKA,EAAM,QAAQ,KAC7B,mBAAgB,CAClB,EACF,EAIEgB,EAAoBhB,GAMjBQ,KACL,OAAC,UACC,MAAO,YAAYA,EAAa,OAChC,KAAM,CAAE,SAAUA,EAAa,IAAK,EACpC,SAAU,IAAM,CACTR,EAAM,QACTW,EAAU,CAACX,EAAM,KAAM,GAAGJ,EAAO,OAAQmB,GAAMA,IAAMf,EAAM,IAAI,CAAC,EAAE,MAAM,EAAG,CAAC,CAAC,KAE/E,WAAQ,aAAaQ,EAAa,MAAM,EACxC,YAAU,MAAMR,EAAM,QAAQ,KAC9B,mBAAgB,CAClB,EACF,EACE,KAGAiB,EAAYjB,GAAiG,CACjH,IAAMkB,EAAU,mBAAmB,YAAYlB,EAAM,QAAQ,EACvDmB,EAAW,iCAAiC,cAAY,iBAAiB,cAAY,uBAAuBD,IAElH,SACE,OAAC,OAAK,KAAL,CACC,GAAIlB,EAAM,KACV,MAAOA,EAAM,KACb,YAAa,CAAC,CAAE,KAAMA,EAAM,QAAS,CAAC,EACtC,UAAQ,OAAC,OAAK,KAAK,OAAV,CAAiB,SAAUA,EAAM,SAAU,EACpD,WACE,QAAC,eACC,qBAAC,cAAY,QAAZ,CACE,UAAAE,IAAoB,YAAW,OAACc,EAAA,CAAkB,GAAGhB,EAAO,KAC7D,OAACc,EAAA,CAAiB,GAAGd,EAAO,EAC3BE,IAAoB,WAAU,OAACc,EAAA,CAAkB,GAAGhB,EAAO,GAC9D,KACA,QAAC,cAAY,QAAZ,CACE,UAACA,EAAM,UAaN,oBACE,oBAAC,UACC,MAAM,qBACN,KAAM,OAAK,YACX,SAAU,CAAE,IAAK,IAAK,UAAW,CAAC,KAAK,CAAE,EACzC,SAAU,IAAM,CACdU,EAAUhB,EAAO,OAAQqB,GAAMA,IAAMf,EAAM,IAAI,CAAC,CAClD,EACF,KACA,OAAC,UACC,MAAM,qBACN,KAAM,CAAE,OAAQ,OAAK,YAAa,UAAW,QAAM,GAAI,EACvD,SAAU,CAAE,IAAK,IAAK,UAAW,CAAC,MAAO,OAAO,CAAE,EAClD,SAAU,IAAM,CACdU,EAAU,CAAC,CAAC,CACd,EACF,GACF,KA7BA,OAAC,UACC,MAAM,WACN,KAAM,OAAK,IACX,SAAU,CAAE,IAAK,IAAK,UAAW,CAAC,MAAO,OAAO,CAAE,EAClD,SAAU,IAAM,CACdA,EAAU,CAACV,EAAM,KAAM,GAAGN,CAAM,CAAC,EAC7BM,EAAM,QACRW,EAAUf,EAAO,OAAQmB,GAAMA,IAAMf,EAAM,IAAI,CAAC,CAEpD,EACF,EAqBDA,EAAM,WACL,oBACE,oBAAC,UACC,MAAM,qBACN,KAAM,OAAK,YACX,SAAU,CAAE,IAAK,IAAK,UAAW,CAAC,KAAK,CAAE,EACzC,SAAU,IAAM,CACdW,EAAUf,EAAO,OAAQmB,GAAMA,IAAMf,EAAM,IAAI,CAAC,CAClD,EACF,KACA,OAAC,UACC,MAAM,qBACN,KAAM,CAAE,OAAQ,OAAK,YAAa,UAAW,QAAM,GAAI,EACvD,SAAU,CAAE,IAAK,IAAK,UAAW,CAAC,MAAO,OAAO,CAAE,EAClD,SAAU,IAAM,CACdW,EAAU,CAAC,CAAC,CACd,EACF,GACF,KAEF,OAAC,SAAO,gBAAP,CACC,MAAO,kCAAkCX,EAAM,OAC/C,UAAW,CAAE,KAAM,cAAcA,EAAM,OAAQ,KAAMmB,CAAS,EAChE,GACF,KACA,OAAC,cAAY,QAAZ,CACC,mBAAC,UACC,MAAM,kBACN,KAAM,OAAK,oBACX,SAAU,CAAE,IAAK,IAAK,UAAW,CAAC,KAAK,CAAE,EACzC,SAAUP,EACZ,EACF,GACF,EAEJ,CAEJ,EAEA,SACE,QAAC,QAAK,gBAAiB,GACrB,oBAAC,OAAK,QAAL,CAAa,MAAM,SACjB,SAAAlB,GAAQ,IAAK0B,MACZ,OAACH,EAAA,CAEC,KAAMG,EACN,SAAUlC,EAAmBkB,EAASE,EAAUc,CAAG,CAAC,EACpD,OAAQ,IAHHA,CAIP,CACD,EACH,KACA,OAAC,OAAK,QAAL,CAAa,MAAM,SACjB,SAAAxB,EAAO,IAAKwB,MACX,OAACH,EAAA,CAEC,KAAMG,EACN,SAAUlC,EAAmBkB,EAASE,EAAUc,CAAG,CAAC,EACpD,OAAQ,IAHHA,CAIP,CACD,EACH,KACA,OAAC,OAAK,QAAL,CAAa,MAAM,YACjB,gBAAO,QAAQd,CAAS,EACtB,OACC,CAAC,CAACc,CAAG,IACHnB,EAAYmB,EAAI,QAAQ,MAAO,EAAE,CAAC,GAClC,CAACxB,EAAO,SAASwB,CAAe,GAChC,CAAC1B,EAAO,SAAS0B,CAAe,CACpC,EACC,IAAI,CAAC,CAACA,EAAKC,CAAI,OACd,OAACJ,EAAA,CAAmB,KAAMG,EAAiB,SAAUlC,EAAmBkB,EAASiB,CAAI,GAAtED,CAAyE,CACzF,EACL,GACF,CAEJ",
  "names": ["change_case_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "SPLIT_LOWER_UPPER_RE", "SPLIT_UPPER_UPPER_RE", "SPLIT_SEPARATE_NUMBER_RE", "DEFAULT_STRIP_REGEXP", "SPLIT_REPLACE_VALUE", "DEFAULT_PREFIX_SUFFIX_CHARACTERS", "split", "value", "result", "start", "end", "splitSeparateNumbers", "words", "i", "word", "match", "offset", "noCase", "input", "options", "prefix", "suffix", "splitPrefixSuffix", "lowerFactory", "camelCase", "lower", "upper", "upperFactory", "transform", "capitalCaseTransformFactory", "pascalCaseTransformFactory", "index", "pascalCase", "pascalSnakeCase", "capitalCase", "constantCase", "dotCase", "kebabCase", "pathCase", "snakeCase", "input", "options", "noCase", "trainCase", "capitalCase", "lowerFactory", "locale", "upperFactory", "capitalCaseTransformFactory", "lower", "upper", "word", "pascalCaseTransformFactory", "index", "char0", "splitPrefixSuffix", "splitFn", "splitSeparateNumbers", "split", "prefixCharacters", "DEFAULT_PREFIX_SUFFIX_CHARACTERS", "suffixCharacters", "prefixIndex", "suffixIndex", "char", "spongeCase", "input", "locale", "result", "char", "swapCase", "input", "locale", "result", "char", "lower", "TOKENS", "IS_SPECIAL_CASE", "IS_MANUAL_CASE", "ALPHANUMERIC_PATTERN", "IS_ACRONYM", "WORD_SEPARATORS", "SENTENCE_TERMINATORS", "TITLE_TERMINATORS", "SMALL_WORDS", "titleCase", "input", "options", "locale", "sentenceCase", "sentenceTerminators", "titleTerminators", "smallWords", "wordSeparators", "terminators", "result", "isNewSentence", "m", "token", "whiteSpace", "index", "acronym", "_", "prefix", "suffix", "upperAt", "matches", "value", "isSentenceEnd", "i", "word", "wordIndex", "nextChar", "lowerCase", "input", "lowerFirst", "sentenceCase", "titleCase", "upperCase", "upperFirst", "functions", "camelCase", "capitalCase", "constantCase", "dotCase", "trainCase", "kebabCase", "noCase", "pascalCase", "pascalSnakeCase", "pathCase", "spongeCase", "snakeCase", "swapCase", "cases", "import_jsx_runtime", "NoTextError", "getSelection", "readContent", "preferredSource", "clipboard", "selected", "modifyCasesWrapper", "input", "case_", "modifiedArr", "lines", "line", "cache", "getPinnedCases", "pinned", "getRecentCases", "recent", "setPinnedCases", "setRecentCases", "Command", "props", "preferences", "preferredAction", "immediatelyConvertToCase", "content", "converted", "functions", "setContent", "frontmostApp", "setFrontmostApp", "setPinned", "setRecent", "refreshContent", "error", "CopyToClipboard", "c", "PasteToActiveApp", "CaseItem", "context", "deeplink", "key", "func"]
}
